Project Folder Structure
========================
video-generator-frontend/
 ├── .DS_Store
 ├── .env.local
 ├── .gitignore
 ├── README.md
 ├── components.json
 ├── create_project_summary.py
 ├── eslint.config.mjs
 ├── netlify.toml
 ├── next-env.d.ts
 ├── next.config.ts
 ├── package-lock.json
 ├── package.json
 ├── postcss.config.mjs
 ├── project_summary.txt
 ├── public
 │   ├── .DS_Store
 │   ├── bottom-no-text.png
 │   ├── file.svg
 │   ├── globe.svg
 │   ├── images
 │   │   ├── empowering-1.png
 │   │   ├── highlight-1.png
 │   │   ├── skull.webp
 │   │   └── team.png
 │   ├── next.svg
 │   ├── texture-01.avif
 │   ├── texture-02.avif
 │   ├── top-no-text.png
 │   ├── vercel.svg
 │   ├── videos
 │   │   ├── .DS_Store
 │   │   ├── about-1.mp4
 │   │   ├── about-2.mp4
 │   │   ├── control-1-optx.mp4
 │   │   ├── control-2-optx.mp4
 │   │   ├── control-3-optx.mp4
 │   │   ├── full-reel.mp4
 │   │   ├── highlight-1-o.mp4
 │   │   ├── highlight-1-opx.mp4
 │   │   ├── model-1.mp4
 │   │   ├── model-2.mp4
 │   │   ├── model-3.mp4
 │   │   └── skeleton.mp4
 │   ├── warrior.mp4
 │   └── window.svg
 ├── src
 │   ├── .DS_Store
 │   ├── app
 │   │   ├── about
 │   │   │   └── page.tsx
 │   │   ├── account
 │   │   │   └── page.tsx
 │   │   ├── contact
 │   │   │   └── page.tsx
 │   │   ├── explore
 │   │   │   ├── ExploreModelGrid.tsx
 │   │   │   ├── HistoryGrid.tsx
 │   │   │   └── page.tsx
 │   │   ├── favicon.ico
 │   │   ├── generator
 │   │   │   └── page.tsx
 │   │   ├── globals.css
 │   │   ├── layout.tsx
 │   │   ├── page.tsx
 │   │   ├── payment
 │   │   │   └── success
 │   │   │       ├── cancel
 │   │   │       │   └── page.tsx
 │   │   │       └── page.tsx
 │   │   ├── pricing
 │   │   │   └── page.tsx
 │   │   ├── signin
 │   │   │   └── page.tsx
 │   │   └── signup
 │   │       └── page.tsx
 │   ├── components
 │   │   ├── .DS_Store
 │   │   ├── DynamicBanner.tsx
 │   │   ├── Footer.tsx
 │   │   ├── HistoryCard.tsx
 │   │   ├── HoverVideoPlayer.tsx
 │   │   ├── LayoutManager.tsx
 │   │   ├── ModelCard.tsx
 │   │   ├── ModelGallery.tsx
 │   │   ├── Navbar.tsx
 │   │   ├── PaymentFormPopup.tsx
 │   │   ├── ThemeProvider.tsx
 │   │   ├── TipsSection.tsx
 │   │   ├── WelcomePage.tsx
 │   │   ├── homepage
 │   │   │   ├── AboutUsSection.tsx
 │   │   │   ├── ControlSection.tsx
 │   │   │   ├── EmpoweringSection.tsx
 │   │   │   ├── HeroSection.tsx
 │   │   │   ├── ModelHighlightSection.tsx
 │   │   │   ├── ModelsSection.tsx
 │   │   │   ├── ParallaxSection.tsx
 │   │   │   └── SnapSection.tsx
 │   │   ├── icons
 │   │   │   └── Googleicon.tsx
 │   │   └── ui
 │   │       ├── alert.tsx
 │   │       ├── aspect-ratio.tsx
 │   │       ├── badge.tsx
 │   │       ├── button.tsx
 │   │       ├── card.tsx
 │   │       ├── carousel.tsx
 │   │       ├── dialog.tsx
 │   │       ├── input.tsx
 │   │       ├── label.tsx
 │   │       ├── progress.tsx
 │   │       ├── select.tsx
 │   │       ├── separator.tsx
 │   │       ├── skeleton.tsx
 │   │       ├── slider.tsx
 │   │       └── textarea.tsx
 │   ├── context
 │   │   └── AuthContext.tsx
 │   ├── lib
 │   │   ├── firebase.ts
 │   │   ├── modelConfigs.ts
 │   │   ├── pdfGenerator.ts
 │   │   └── utils.ts
 │   └── types
 │       └── types.ts
 ├── tailwind.config.js
 └── tsconfig.json


Concatenated TSX Files
========================

================================================================================
// FILE: ./src/context/AuthContext.tsx
================================================================================

"use client";

import { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { onAuthStateChanged, User } from 'firebase/auth';
import { doc, onSnapshot, DocumentData } from 'firebase/firestore';
import { auth, db } from '@/lib/firebase';

interface AuthContextType {
  user: User | null;
  loading: boolean;
  credits: number;
  setCredits: (credits: number) => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [credits, setCredits] = useState(0);

  useEffect(() => {
    // This will hold the unsubscribe function for the Firestore listener
    let unsubscribeSnapshot: (() => void) | undefined;

    const unsubscribeAuth = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);

      // If a user was previously logged in, we need to unsubscribe from their document listener
      if (unsubscribeSnapshot) {
        unsubscribeSnapshot();
      }

      if (currentUser) {
        // User is signed in, let's listen to their data in real-time
        const userDocRef = doc(db, 'users', currentUser.uid);
        
        unsubscribeSnapshot = onSnapshot(userDocRef, (doc) => {
          if (doc.exists()) {
            // Update credits whenever the document changes
            setCredits(doc.data().credits);
          } else {
            // This can happen if signup is not complete before this listener attaches
            console.log("Listening, but user document doesn't exist yet.");
            setCredits(0); // Default to 0 if doc is not found
          }
          setLoading(false);
        }, (error) => {
          console.error("Error listening to user document:", error);
          setCredits(0);
          setLoading(false);
        });

      } else {
        // User is signed out
        setCredits(0);
        setLoading(false);
      }
    });

    // Cleanup function: Unsubscribe from both auth and Firestore listeners when the provider unmounts
    return () => {
      unsubscribeAuth();
      if (unsubscribeSnapshot) {
        unsubscribeSnapshot();
      }
    };
  }, []); // The empty dependency array ensures this effect runs only once on mount

  const value = { user, loading, credits, setCredits };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
================================================================================
// FILE: ./src/app/layout.tsx
================================================================================

// FILE: ./src/app/layout.tsx
import type { Metadata } from "next";
import "./globals.css";
import { AuthProvider } from "@/context/AuthContext";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";
import LayoutManager from "@/components/LayoutManager"; // Import the new client component


export const metadata: Metadata = {
  title: "reelzila | AI Studio",
  description: "Generate stunning videos from text prompts using the power of AI.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    // THE FIX: Add className="dark" to the <html> tag. This will now work.
    <html lang="en" className="dark h-full">
      <body className={`flex flex-col h-full`}>
        <AuthProvider>
          {/*
            The LayoutManager now contains all the client-side logic
            for handling the navbar and conditional footer.
          */}
          <LayoutManager>{children}</LayoutManager>
        </AuthProvider>
      </body>
    </html>
  );
}
================================================================================
// FILE: ./src/app/page.tsx
================================================================================


// page.tsx
"use client";

import { useRef } from 'react';
import { useScroll } from 'framer-motion';

// Import all your section components
import { HeroSection } from "@/components/homepage/HeroSection";
import { ModelHighlightSection } from "@/components/homepage/ModelHighlightSection";
import { ControlSection } from "@/components/homepage/ControlSection";
import { AboutUsSection } from "@/components/homepage/AboutUsSection";
import { ModelsSection } from "@/components/homepage/ModelsSection";
import { EmpoweringSection } from "@/components/homepage/EmpoweringSection";

// Import the new ParallaxSection wrapper
import { ParallaxSection } from "@/components/homepage/ParallaxSection";

// Put your section components into an array for easy mapping
const sections = [
  HeroSection,
  ModelHighlightSection,
  ControlSection,
  AboutUsSection,
  ModelsSection,
  EmpoweringSection
];

export default function HomePage() {
  const container = useRef(null);
  const { scrollYProgress } = useScroll({
    target: container,
    offset: ['start start', 'end end']
  });

  return (
    <div 
      className="relative bg-black overflow-y-scroll h-screen"
      style={{ 
        scrollSnapType: 'y proximity',
      }}
    >
      <main 
        ref={container} 
        className="relative" 
        style={{ 
          height: `${sections.length * 100}vh`,
        }}
      >
        {sections.map((SectionComponent, i) => (
          <ParallaxSection 
            key={i} 
            i={i} 
            progress={scrollYProgress} 
            totalSections={sections.length}
          >
            <SectionComponent />
          </ParallaxSection>
        ))}
      </main>
    </div>
  );
}
================================================================================
// FILE: ./src/app/contact/page.tsx
================================================================================

// FILE: ./src/app/contact/page.tsx
"use client";

import { useState } from "react";
import { useAuth } from "@/context/AuthContext";
import { db } from "@/lib/firebase";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Loader2, CheckCircle } from "lucide-react";

export default function ContactPage() {
  const { user } = useAuth();
  const [formData, setFormData] = useState({
    name: "",
    surname: "",
    email: user?.email || "",
    message: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<{
    success: boolean;
    message: string;
  } | null>(null);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!formData.name || !formData.email || !formData.message) {
      setSubmitStatus({ success: false, message: "Please fill out all required fields." });
      return;
    }
    
    setIsSubmitting(true);
    setSubmitStatus(null);

    try {
      await addDoc(collection(db, "contacts"), {
        ...formData,
        userId: user?.uid || null,
        submittedAt: serverTimestamp(),
      });
      
      setSubmitStatus({ success: true, message: "Thank you! Your message has been sent." });
      setFormData({ name: "", surname: "", email: user?.email || "", message: "" });

    } catch (error) {
      console.error("Error submitting contact form:", error);
      setSubmitStatus({ success: false, message: "Something went wrong. Please try again." });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const inputStyles = "bg-transparent border-0 border-b border-neutral-700 rounded-none px-0 focus-visible:ring-0 focus-visible:border-b-white transition-colors";

  return (
    <div className="bg-black text-white min-h-screen pt-32">
      <div className="container mx-auto py-16 md:py-24">
        <div className="grid md:grid-cols-2 gap-16 items-start">
          <div className="space-y-4">
            <p className="text-sm uppercase tracking-widest text-neutral-400">GET IN TOUCH</p>
            {/* THE FIX: Title is now in all caps */}
            <h1 className="text-6xl md:text-8xl font-medium tracking-tighter">
              CONTACT US
            </h1>
            <p className="text-lg text-neutral-400 max-w-md">
              Do you have any questions, suggestions, or complaints? Please contact us via the contact form or email us at <span className="text-white">info@reelzila.com</span>.
            </p>
          </div>

          <form onSubmit={handleSubmit} className="space-y-8">
            <div className="grid gap-2">
              <Label htmlFor="name">Name</Label>
              <Input
                id="name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                placeholder="Eg: John..."
                className={inputStyles}
                disabled={isSubmitting}
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="surname">Surname</Label>
              <Input
                id="surname"
                name="surname"
                value={formData.surname}
                onChange={handleInputChange}
                placeholder="Eg: Doe..."
                className={inputStyles}
                disabled={isSubmitting}
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                name="email"
                type="email"
                value={formData.email}
                onChange={handleInputChange}
                placeholder="Eg: johndoe@gmail.com..."
                className={inputStyles}
                disabled={isSubmitting}
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="message">Message</Label>
              <Textarea
                id="message"
                name="message"
                value={formData.message}
                onChange={handleInputChange}
                placeholder="Your message..."
                className={`${inputStyles} h-32`}
                disabled={isSubmitting}
              />
            </div>
            
            <Button
              type="submit"
              size="lg"
              variant="brand-lime"
              className="w-full text-lg"
              disabled={isSubmitting}
            >
              {isSubmitting ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : 'Submit'}
            </Button>
            
            {submitStatus && (
              <div className={`mt-4 text-center p-2 rounded-md text-sm flex items-center justify-center gap-2 ${submitStatus.success ? 'bg-green-500/10 text-green-400' : 'bg-red-500/10 text-red-400'}`}>
                {submitStatus.success && <CheckCircle className="h-4 w-4" />}
                {submitStatus.message}
              </div>
            )}
          </form>
        </div>
      </div>
    </div>
  );
}
================================================================================
// FILE: ./src/app/payment/success/page.tsx
================================================================================

"use client";

import Link from "next/link";
import { Button } from "@/components/ui/button";
import { CheckCircle } from "lucide-react";

export default function PaymentSuccessPage() {
  return (
    <div className="bg-black text-white min-h-screen flex flex-col items-center justify-center text-center p-4">
      <CheckCircle className="w-16 h-16 text-green-400 mb-6" />
      <h1 className="text-4xl md:text-5xl font-extrabold tracking-tighter">Payment Successful!</h1>
      <p className="mt-4 text-lg text-neutral-400 max-w-md">
        Your credits have been added to your account. You can now continue creating.
      </p>
      <div className="mt-8 flex gap-4">
        <Link href="/account">
          <Button variant="brand-solid">Go to My Account</Button>
        </Link>
        <Link href="/explore">
          <Button variant="brand-outline">Explore Models</Button>
        </Link>
      </div>
    </div>
  );
}
================================================================================
// FILE: ./src/app/payment/success/cancel/page.tsx
================================================================================

"use client";

import Link from "next/link";
import { Button } from "@/components/ui/button";
import { XCircle } from "lucide-react";

export default function PaymentCancelPage() {
  return (
    <div className="bg-black text-white min-h-screen flex flex-col items-center justify-center text-center p-4">
      <XCircle className="w-16 h-16 text-yellow-400 mb-6" />
      <h1 className="text-4xl md:text-5xl font-extrabold tracking-tighter">Payment Canceled</h1>
      <p className="mt-4 text-lg text-neutral-400 max-w-md">
        Your transaction was not completed. Your account has not been charged.
      </p>
      <div className="mt-8">
        <Link href="/pricing">
          <Button variant="brand-solid">Try Again</Button>
        </Link>
      </div>
    </div>
  );
}
================================================================================
// FILE: ./src/app/signup/page.tsx
================================================================================

"use client";

import { useState } from 'react';
import { createUserWithEmailAndPassword, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';
import { doc, getDoc, setDoc } from 'firebase/firestore';
import { auth, db } from '@/lib/firebase';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Film, Eye, EyeOff } from 'lucide-react';
import { GoogleIcon } from '@/components/icons/Googleicon';

export default function SignUp() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const router = useRouter();

  const handleGoogleSignIn = async () => {
    setError('');
    const provider = new GoogleAuthProvider();
    try {
      const result = await signInWithPopup(auth, provider);
      const user = result.user;
      
      // Check if user already exists in Firestore
      const userDocRef = doc(db, "users", user.uid);
      const userDoc = await getDoc(userDocRef);

      // If user doesn't exist, create a new document with welcome credits
      if (!userDoc.exists()) {
        await setDoc(userDocRef, {
          email: user.email,
          credits: 10,
          activePlan: "Starter",
          isAdmin: false
        });
      }
      router.push('/');
    } catch (err) {
      setError((err as Error).message);;
    }
  };

  const handleEmailSignUp = async () => {
    setError('');
    if (!email || !password) {
      setError('Email and password are required.');
      return;
    }
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;
      // Initialize user document with a welcome credit balance
      await setDoc(doc(db, 'users', user.uid), {
        email: user.email,
        credits: 10,
      });
      router.push('/');
    } catch (err)
    {
      setError((err as Error).message);
    }
  };

  return (
    <div className="w-full lg:grid lg:min-h-screen lg:grid-cols-2">
      <div className="hidden bg-muted lg:flex lg:flex-col lg:items-center lg:justify-center p-10 text-center">
        <div className="flex items-center text-primary mb-4">
          <Film className="h-12 w-12" />
          <h1 className="ml-4 text-4xl font-bold">VX AI</h1>
        </div>
        <p className="text-xl text-muted-foreground mt-2">
          Transform your creative ideas into stunning videos with the power of AI.
        </p>
        <div className="mt-8 w-full max-w-md h-64 bg-gray-200 rounded-lg flex items-center justify-center">
          <p className="text-gray-500">Illustrative Video/Graphic Here</p>
        </div>
      </div>
      <div className="flex items-center justify-center py-12">
        <div className="mx-auto grid w-[350px] gap-6">
          <div className="grid gap-2 text-center">
            <h1 className="text-3xl font-bold">Create an account</h1>
            <p className="text-balance text-muted-foreground">
              Enter your details below to get started
            </p>
          </div>
          <div className="grid gap-4">
            <Button variant="outline" onClick={handleGoogleSignIn}>
              <GoogleIcon className="mr-2 h-4 w-4" />
              Sign up with Google
            </Button>
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <Separator />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-background px-2 text-muted-foreground">
                  Or continue with email
                </span>
              </div>
            </div>
            <div className="grid gap-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="m@example.com"
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            <div className="grid gap-2 relative">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type={showPassword ? 'text' : 'password'}
                required
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
              <button
                type="button"
                className="absolute right-3 top-9 text-muted-foreground"
                onClick={() => setShowPassword(!showPassword)}
              >
                {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </button>
            </div>
            {error && <p className="text-red-500 text-sm">{error}</p>}
            <Button type="submit" className="w-full" onClick={handleEmailSignUp}>
              Create account
            </Button>
          </div>
          <div className="mt-4 text-center text-sm">
            Already have an account?{' '}
            <Link href="/signin" className="underline">
              Sign in
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}
================================================================================
// FILE: ./src/app/about/page.tsx
================================================================================

"use client";

import { DynamicBanner, BannerSlide } from "@/components/DynamicBanner";
import { AboutUsSection } from "@/components/homepage/AboutUsSection";

// Define the content for the 3 slides
const aboutUsSlides: BannerSlide[] = [
  {
    videoSrc: "/videos/about-1.mp4", // Replace with your video
    title: <>Engineering the<br />Future of Creativity</>,
    subtitle: "We bring together experts from diverse fields to engineer robust, scalable systems that make advanced AI accessible and intuitive for everyone.",
    buttonText: "Explore Models",
    buttonLink: "/explore"
  },
];

export default function AboutUsPage() {
  return (
    <div className="bg-black space-y-24 md:space-y-24">
      <DynamicBanner slides={aboutUsSlides} />
      <AboutUsSection />
      <div className="h-12"/>
    </div>
  );
}
================================================================================
// FILE: ./src/app/explore/ExploreModelGrid.tsx
================================================================================

"use client";

import React from 'react';
import Link from "next/link";
import { modelConfigs } from "@/lib/modelConfigs";
import { Badge } from "@/components/ui/badge";
import { HoverVideoPlayer } from "@/components/HoverVideoPlayer";

export const ExploreModelGrid = () => {
  const models = Object.values(modelConfigs);

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {models.map((model) => (
        <Link key={model.id} href={`/generator?model=${model.id}`} className="group">
          <div className="bg-[#1C1C1C] rounded-2xl p-4 transition-all group-hover:ring-2 group-hover:ring-white/50 h-full flex flex-col">
            <div className="aspect-video rounded-lg overflow-hidden">
              <HoverVideoPlayer src={model.cardVideo} />
            </div>
            <div className="p-4 flex-grow flex flex-col justify-between">
              <div>
                <Badge variant="outline" className="border-neutral-500 text-neutral-300 capitalize">{model.outputType}</Badge>
                <h3 className="text-xl font-bold mt-4 text-white">{model.displayName}</h3>
                <p className="text-neutral-400 mt-2 text-sm line-clamp-2">{model.description}</p>
              </div>
              <div className="flex gap-2 mt-4">
                {model.tags.map(tag => <Badge key={tag} className="bg-neutral-700 text-neutral-200 hover:bg-neutral-600">{tag}</Badge>)}
              </div>
            </div>
          </div>
        </Link>
      ))}
    </div>
  );
};
================================================================================
// FILE: ./src/app/explore/HistoryGrid.tsx
================================================================================

"use client";

import { Card } from "@/components/ui/card";
import { AspectRatio } from "@/components/ui/aspect-ratio";

interface Generation {
  id: string;
  outputUrl: string;
  outputType: 'video' | 'image';
  prompt: string;
  createdAt: {
    toDate: () => Date;
  };
}

interface HistoryCardProps {
  item: Generation;
}

export const HistoryCard: React.FC<HistoryCardProps> = ({ item }) => {
  return (
    <div className="w-80 flex-shrink-0">
      <Card className="overflow-hidden rounded-2xl relative group">
        <AspectRatio ratio={1 / 1} className="bg-neutral-800">
          {item.outputType === 'video' ? (
            <video src={item.outputUrl} muted loop autoPlay className="w-full h-full object-cover" />
          ) : (
            <img src={item.outputUrl} alt={item.prompt || "Generated image"} className="w-full h-full object-cover" />
          )}
        </AspectRatio>
        <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent" />
        <div className="absolute bottom-0 left-0 p-4 text-white">
          <p className="font-medium line-clamp-2">{item.prompt}</p>
          <p className="text-xs text-neutral-400 mt-1">
            {item.createdAt?.toDate().toLocaleDateString('en-US', { day: 'numeric', month: 'short', year: 'numeric' })}
          </p>
        </div>
      </Card>
    </div>
  );
};
================================================================================
// FILE: ./src/app/explore/page.tsx
================================================================================

"use client";

import React, { useEffect, useState } from "react";
import Link from "next/link";
import { useAuth } from "@/context/AuthContext";
import { modelConfigs } from "@/lib/modelConfigs";
import { collection, query, orderBy, onSnapshot, limit } from "firebase/firestore";
import { db } from "@/lib/firebase";
import { Sparkles } from "lucide-react";

// --- Component Imports ---
import { HistoryCard } from "@/components/HistoryCard";
import { ModelCard } from "@/components/ModelCard";
import { DynamicBanner, BannerSlide } from "@/components/DynamicBanner";
import { Card } from "@/components/ui/card";
import { AspectRatio } from "@/components/ui/aspect-ratio";
import { Skeleton } from "@/components/ui/skeleton";

// --- Shared Type Imports ---
import { Generation, ModelConfig } from "@/types/types";

// --- Data Transformation for the Banner ---
const explorePageSlides: BannerSlide[] = Object.values(modelConfigs)
  .slice(0, 3) // ✅ Take only the first 3 elements
  .map(model => ({
    videoSrc: (model as ModelConfig).cardVideo,
    title: (model as ModelConfig).displayName,
    subtitle: (model as ModelConfig).description,
    buttonText: "Try it now!",
    buttonLink: `/generator?model=${(model as ModelConfig).id}`, // ✅ Fixed template literal
  }));


// --- Components ---

function ModelGrid() {
  const models = Object.values(modelConfigs);
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {models.map((model) => (
        <ModelCard key={model.id} model={model as ModelConfig} />
      ))}
    </div>
  );
}

function HistorySection() {
  const { user } = useAuth();
  const [history, setHistory] = useState<Generation[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    if (!user) {
      setIsLoading(false);
      return;
    }
    const q = query(collection(db, "users", user.uid, "generations"), orderBy("createdAt", "desc"), limit(12));
    const unsub = onSnapshot(q, (snapshot) => {
      setHistory(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Generation)));
      setIsLoading(false);
    });
    return () => unsub();
  }, [user]);

  const gridContainerClasses = "flex gap-6 overflow-x-auto pb-4 lg:grid lg:grid-cols-3 xl:grid-cols-4 lg:overflow-visible";

  if (isLoading) {
    return (
      <div className={gridContainerClasses}>
        {[...Array(3)].map((_, i) => (
          <div key={i} className="w-80 flex-shrink-0 lg:w-auto">
            <Card className="overflow-hidden rounded-2xl bg-transparent">
              <AspectRatio ratio={1 / 1}>
                <Skeleton className="w-full h-full bg-[#1C1C1C]" />
              </AspectRatio>
            </Card>
          </div>
        ))}
      </div>
    );
  }

  if (history.length === 0) {
    // THE FIX: The placeholder is now in a simple flex container that doesn't stretch vertically.
    // It's no longer trying to be a grid item, which caused the height issue.
    return (
      <div className="flex justify-center lg:justify-start w-full">
        <div className="w-80 flex-shrink-0">
          <Link href="/generator" className="group block h-full">
            <Card className="overflow-hidden rounded-2xl h-full border-neutral-800 bg-[#1C1C1C] hover:border-neutral-700 transition-colors">
              <AspectRatio ratio={1 / 1} className="flex flex-col items-center justify-center text-center text-neutral-500 p-6">
                <Sparkles className="h-10 w-10 mb-4" />
                <p className="font-semibold text-neutral-400">No history yet</p>
                <p className="text-sm">Start generating to see your creations.</p>
              </AspectRatio>
            </Card>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className={gridContainerClasses}>
      {history.map(item => (
        <div key={item.id} className="w-80 flex-shrink-0 sm:w-72 md:w-80 lg:w-auto">
          <HistoryCard item={item} />
        </div>
      ))}
    </div>
  );
}

export default function ExplorePage() {
  const { user } = useAuth();
  
  return (
    <div className="bg-black text-white">
      <DynamicBanner slides={explorePageSlides} />
      
      <div className="container mx-auto px-4">
        <div className="space-y-16 md:space-y-24 py-16 md:py-24">
          <section>
            <div className="mb-12">
              <p className="text-sm uppercase tracking-widest text-neutral-400">AI MODELS</p>
              <h2 className="text-4xl md:text-6xl font-regular tracking-tighter mt-2">MODELS</h2>
              <p className="max-w-2xl text-neutral-300 mt-4">Browse our curated collection of foundational models, each designed to empower your creative vision.</p>
            </div>
            <ModelGrid />
          </section>
          
          {user && (
            <section>
              <div className="mb-12">
                <p className="text-sm uppercase tracking-widest text-neutral-400">YOUR CREATIONS</p>
                <h2 className="text-4xl md:text-6xl font-regular tracking-tighter mt-2">HISTORY</h2>
                <p className="max-w-2xl text-neutral-300 mt-4">A gallery of your most recent generations. Revisit your work and continue your creative journey.</p>
              </div>
              <HistorySection />
            </section>
          )}
        </div>
      </div>
    </div>
  );
}
================================================================================
// FILE: ./src/app/generator/page.tsx
================================================================================

"use client";

import { useState, Suspense, useEffect, ChangeEvent } from 'react';
import { useAuth } from '@/context/AuthContext';
import { useSearchParams } from 'next/navigation';
import { modelConfigs } from '@/lib/modelConfigs';

// Shadcn UI Component Imports
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Slider } from '@/components/ui/slider';
import { Input } from '@/components/ui/input';
import { AspectRatio } from '@/components/ui/aspect-ratio';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { TipsSection } from "@/components/TipsSection";
import { Separator } from "@/components/ui/separator";

// Lucide React Icon Imports
import { Wand2, Frown, Video, Image as ImageIcon } from 'lucide-react';

// Define the possible types for parameters state
type ParamValues = string | number | null;
// Define the possible types for the output media
type OutputType = 'video' | 'image' | null;

/**
 * Helper function to determine if the output is a video or image based on the URL extension.
 * @param url The URL of the generated media.
 * @returns 'video', 'image', or null if the type is unknown.
 */
const getOutputTypeFromUrl = (url: string): OutputType => {
  if (!url) return null;
  // Use URL constructor for robust parsing, even with query parameters
  const pathname = new URL(url).pathname;
  const extension = pathname.split('.').pop()?.toLowerCase();
  
  if (extension === 'mp4') return 'video';
  if (['png', 'jpg', 'jpeg', 'webp', 'avif'].includes(extension || '')) return 'image';
  
  // Fallback if no known extension is found
  return null;
};

function GeneratorComponent() {
  const { user, credits, setCredits } = useAuth();
  const searchParams = useSearchParams();
  const modelId = searchParams.get('model') || 'veo-3-fast';
  const currentModelConfig = modelConfigs[modelId];

  // State Management
  const [params, setParams] = useState<{[key: string]: ParamValues}>({});
  const [outputUrl, setOutputUrl] = useState('');
  const [detectedOutputType, setDetectedOutputType] = useState<OutputType>(null);
  const [generating, setGenerating] = useState(false);
  const [error, setError] = useState('');
  const [imagePreview, setImagePreview] = useState<string | null>(null);

  // Effect to reset state when the model is changed via URL
  useEffect(() => {
    if (!currentModelConfig) return;
    const defaultParams: {[key: string]: ParamValues} = {};
    currentModelConfig.params.forEach(param => { defaultParams[param.name] = param.defaultValue; });
    setParams(defaultParams);
    
    // Reset all outputs and previews
    setImagePreview(null);
    setOutputUrl('');
    setError('');
    setGenerating(false);
    setDetectedOutputType(null);
  }, [currentModelConfig]);

  const handleParamChange = (name: string, value: string | number) => { setParams(prev => ({ ...prev, [name]: value })); };
  
  const handleImageChange = (e: ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        const dataUrl = reader.result as string;
        handleParamChange('image', dataUrl);
        setImagePreview(dataUrl);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleGenerate = async () => {
    if (!user || credits <= 0) {
      setError(user ? "You don't have enough credits." : "Please sign in.");
      return;
    }
    setGenerating(true);
    setError('');
    setOutputUrl('');
    setDetectedOutputType(null);

    try {

           // const apiURL = 'https://aivideogenerator-production.up.railway.app/generate-video';
      const apiUrl = `http://0.0.0.0:8000/generate-video`;
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: user.uid, model_id: modelId, params }),
      });
      if (!response.ok) {
        throw new Error((await response.json()).detail || 'Failed to generate');
      }
      const data = await response.json();

      if (data.output_urls && Array.isArray(data.output_urls) && data.output_urls.length > 0) {
        const newUrl = data.output_urls[0];
        setOutputUrl(newUrl);
        // Detect and set the output type from the resulting URL
        setDetectedOutputType(getOutputTypeFromUrl(newUrl));
      } else {
        throw new Error("The model did not return a valid output.");
      }
      setCredits(credits - 1);
    } catch (err) { 
      setError((err as Error).message);
    } finally {
      setGenerating(false);
    }
  };

  if (!currentModelConfig) {
    return (
      <div className="container mx-auto p-8 text-center">
        <h2 className="text-xl font-semibold text-red-500">Error: Model Configuration Not Found</h2>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4 sm:p-6 md:p-8">
      <section className="text-center max-w-4xl mx-auto mb-10">
        <h1 className="text-3xl md:text-4xl font-extrabold tracking-tight flex items-center justify-center gap-3">
          What do you want to create today?
        </h1>
        <h3 className="text-gray-500 tracking-tight flex items-center justify-center gap-3">
          What do you want to create today?
        </h3>
      </section>
      <div className="grid grid-cols-1 lg:grid-cols-5 gap-8">
        <div className="lg:col-span-2">
          <Card className="sticky top-20 bg-black-500 border-black">
            <CardHeader><CardTitle className="text-2xl font-bold">Input Parameters</CardTitle></CardHeader>
            <CardContent className="space-y-6">
              {currentModelConfig.params.map(param => (
                <div key={param.name} className="grid w-full items-center gap-2">
                  <Label htmlFor={param.name} className="font-semibold">{param.label}</Label>
                  {param.type === 'textarea' && <Textarea id={param.name} value={params[param.name] as string || ''} onChange={(e) => handleParamChange(param.name, e.target.value)} rows={5} disabled={generating} />}
                  {param.type === 'slider' && <div className="flex items-center gap-4 pt-1"><Slider id={param.name} value={[params[param.name] as number || 0]} onValueChange={([value]) => handleParamChange(param.name, value)} min={param.min} max={param.max} step={param.step} disabled={generating} /><span className="font-mono text-sm w-12 text-center rounded-md border p-2">{params[param.name] as number}</span></div>}
                  {param.type === 'image' && <div className='grid gap-3'><Input id={param.name} type="file" onChange={handleImageChange} accept="image/*" disabled={generating} />{imagePreview && <AspectRatio ratio={16 / 9} className="bg-muted rounded-md border"><img src={imagePreview} alt="Image preview" className="object-contain w-full h-full rounded-md" /></AspectRatio>}</div>}
                  {param.type === 'dropdown' && <Select value={params[param.name] as string || ''} onValueChange={(value) => handleParamChange(param.name, value)} disabled={generating}><SelectTrigger><SelectValue /></SelectTrigger><SelectContent>{param.options?.map(option => <SelectItem key={option} value={option}>{option.charAt(0).toUpperCase() + option.slice(1)}</SelectItem>)}</SelectContent></Select>}
                </div>
              ))}
            </CardContent>
            <CardFooter className="flex-col items-start gap-4">
              <Button onClick={handleGenerate} disabled={generating} size="lg" className="w-full">
                <Wand2 className="mr-2 h-5 w-5" /> Generate Media ({credits} Credits)
              </Button>
              {error && <p className="text-red-500 text-sm flex items-center"><Frown className="mr-2 h-4 w-4" />{error}</p>}
            </CardFooter>
          </Card>
        </div>
        <div className="lg:col-span-3">
          <Card className='bg-black-500'>
            <CardHeader >
              <CardTitle className="flex justify-between items-center">
                Result
                <Badge variant={generating ? "secondary" : "default"}>
                  {generating ? "Generating..." : (outputUrl ? "Complete" : "Example")}
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <AspectRatio ratio={16/9} className="bg-muted rounded-md flex items-center justify-center overflow-hidden">
                {generating ? (
                  <div className="flex flex-col items-center justify-center h-full text-muted-foreground">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
                    <p className="mt-4">Rendering your masterpiece...</p>
                  </div>
                ) : outputUrl ? (
                  <>
                    {detectedOutputType === 'video' && (
                      <video src={outputUrl} controls autoPlay loop className="w-full h-full rounded-md" />
                    )}
                    {detectedOutputType === 'image' && (
                      <img src={outputUrl} alt="Generated result" className="object-contain w-full h-full rounded-md" />
                    )}
                    {detectedOutputType === null && (
                        <div className="text-center text-muted-foreground p-4">
                            <p>Unsupported output format.</p>
                            <a href={outputUrl} target="_blank" rel="noopener noreferrer" className="text-primary underline mt-2 block">View Raw Output</a>
                        </div>
                    )}
                  </>
                ) : (
                  <video src="/warrior.mp4" autoPlay loop muted playsInline className="w-full h-full object-cover" />
                )}
              </AspectRatio>
            </CardContent>
          </Card>
        </div>
      </div>
      <Separator className="my-16" />
      <TipsSection tips={currentModelConfig.tips} />
    </div>
  );
}

export default function GeneratorPage() {
    return (
        <Suspense fallback={
          <div className="container mx-auto p-8 text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto"></div>
            <p className="mt-4 text-muted-foreground">Loading Model...</p>
          </div>
        }>
            <GeneratorComponent />
        </Suspense>
    )
}
================================================================================
// FILE: ./src/app/signin/page.tsx
================================================================================

"use client";

import { useState } from 'react';
import { signInWithEmailAndPassword, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';
import { doc, getDoc, setDoc } from 'firebase/firestore';
import { auth, db } from '@/lib/firebase';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Film, Eye, EyeOff } from 'lucide-react';
import { GoogleIcon } from '@/components/icons/Googleicon';

export default function SignIn() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');
  const router = useRouter();

  const handleGoogleSignIn = async () => {
    setError('');
    const provider = new GoogleAuthProvider();
    try {
      const result = await signInWithPopup(auth, provider);
      const user = result.user;
      
      const userDocRef = doc(db, "users", user.uid);
      const userDoc = await getDoc(userDocRef);

      if (!userDoc.exists()) {
        await setDoc(userDocRef, {
          email: user.email,
          credits: 10,
        });
      }
      router.push('/');
    } catch (err) {
      setError((err as Error).message);
    }
  };

  const handleEmailSignIn = async () => {
    setError('');
    try {
      await signInWithEmailAndPassword(auth, email, password);
      router.push('/');
    } catch (err) {
      setError('Invalid email or password. Please try again.');
    }
  };

  return (
    <div className="w-full lg:grid lg:min-h-screen lg:grid-cols-2">
      <div className="flex items-center justify-center py-12">
        <div className="mx-auto grid w-[350px] gap-6">
          <div className="grid gap-2 text-center">
            <h1 className="text-3xl font-bold">Welcome Back</h1>
            <p className="text-balance text-muted-foreground">
              Enter your credentials to access your account
            </p>
          </div>
          <div className="grid gap-4">
            <Button variant="outline" onClick={handleGoogleSignIn}>
              <GoogleIcon className="mr-2 h-4 w-4" />
              Sign in with Google
            </Button>
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <Separator />
              </div>
              <div className="relative flex justify-center text-xs uppercase">
                <span className="bg-background px-2 text-muted-foreground">
                  Or continue with email
                </span>
              </div>
            </div>
            <div className="grid gap-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="m@example.com"
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            <div className="grid gap-2 relative">
              <div className="flex items-center">
                <Label htmlFor="password">Password</Label>
                <Link
                  href="#"
                  className="ml-auto inline-block text-sm underline"
                >
                  Forgot your password?
                </Link>
              </div>
              <Input
                id="password"
                type={showPassword ? 'text' : 'password'}
                required
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
              <button
                type="button"
                className="absolute right-3 top-9 text-muted-foreground"
                onClick={() => setShowPassword(!showPassword)}
              >
                {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </button>
            </div>
            {error && <p className="text-red-500 text-sm">{error}</p>}
            <Button type="submit" className="w-full" onClick={handleEmailSignIn}>
              Sign In
            </Button>
          </div>
          <div className="mt-4 text-center text-sm">
            Don&apos;t have an account?
            <Link href="/signup" className="underline">
              Sign up
            </Link>
          </div>
        </div>
      </div>
      <div className="hidden bg-muted lg:flex lg:flex-col lg:items-center lg:justify-center p-10 text-center">
        <div className="flex items-center text-primary mb-4">
          <Film className="h-12 w-12" />
          <h1 className="ml-4 text-4xl font-bold">VX AI</h1>
        </div>
        <p className="text-xl text-muted-foreground mt-2">
          Where your text-based concepts blossom into vibrant, visual realities.
        </p>
        <div className="mt-8 w-full max-w-md h-64 bg-gray-200 rounded-lg flex items-center justify-center">
          <p className="text-gray-500">Illustrative Video/Graphic Here</p>
        </div>
      </div>
    </div>
  );
}
================================================================================
// FILE: ./src/app/account/page.tsx
================================================================================

"use client";

import { useAuth } from "@/context/AuthContext";
import { db } from "@/lib/firebase";
import { collection, query, onSnapshot, orderBy, doc, getDoc } from "firebase/firestore";
import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Input } from "@/components/ui/input";
import Link from "next/link";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { PaymentTransaction } from "@/types/types";
import { generateTransactionPDF } from "@/lib/pdfGenerator";
import { Download, CreditCard, AlertCircle } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { FirebaseError } from "firebase/app"; 
// --- THE FIX: Define a specific type for the subscription state ---
interface SubscriptionState {
  planName: string;
  status: 'active' | 'inactive' | 'pending' | string; // Allow for other potential statuses
}
// --- Sub-components ---
function UsageStats() {
  const { user } = useAuth();
  const [usage, setUsage] = useState<Record<string, number>>({});
  useEffect(() => {
    if (!user) return;
    const q = query(collection(db, "users", user.uid, "generations"));
    const unsub = onSnapshot(q, (snapshot) => {
      const counts: Record<string, number> = {};
      snapshot.forEach(doc => {
        const data = doc.data() as { modelId?: string };
        const modelId = data.modelId || "unknown";
        counts[modelId] = (counts[modelId] || 0) + 1;
      });
      setUsage(counts);
    });
    return () => unsub();
  }, [user]);
  if (Object.keys(usage).length === 0) {
    return (
      <Card className="bg-[#1C1C1C] border-neutral-800 p-4 text-center text-neutral-400 text-sm">
        No usage data yet. <Link href="/explore" className="text-white underline">Start creating</Link> to see your stats.
      </Card>
    );
  }
  return (
    <div>
        <h2 className="font-semibold text-lg mb-4">Usage per model</h2>
        <div className="space-y-3">
            {Object.entries(usage).map(([modelId, count]) => (
                 <div key={modelId} className="flex justify-between items-center text-neutral-400">
                    <p className="capitalize">{modelId.replace(/-/g, ' ')}</p>
                    <p>{count} Generations</p>
                 </div>
            ))}
        </div>
    </div>
  );
}

function BillingHistory() {
  const { user } = useAuth();
  const [history, setHistory] = useState<PaymentTransaction[]>([]);
  useEffect(() => {
    if (!user) return;
    const q = query(collection(db, "users", user.uid, "payments"), orderBy("createdAt", "desc"));
    const unsub = onSnapshot(q, (snapshot) => {
      setHistory(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as PaymentTransaction)));
    });
    return () => unsub();
  }, [user]);
  if (history.length === 0) {
    return (
      <div>
        <h2 className="font-semibold text-lg mb-4">Billing History</h2>
        <Card className="bg-[#1C1C1C] border-neutral-800 p-4 text-center text-neutral-400 text-sm">
          No billing history found. <Link href="/pricing" className="text-white underline">Purchase credits</Link> to get started.
        </Card>
      </div>
    );
  }
  return (
     <div>
        <h2 className="font-semibold text-lg mb-4">Billing History</h2>
        <div className="space-y-4">
            {history.map(item => (
                <div key={item.id} className="flex justify-between items-center border-b border-neutral-800 pb-2">
                    <div>
                        <p className="text-sm text-neutral-300">{item.createdAt?.toDate().toLocaleDateString()}</p>
                        <p className="font-medium">€{item.amount} - {item.type || 'Purchase'}</p>
                        <Badge 
                          variant={item.status === 'paid' ? 'default' : 'secondary'}
                          className={item.status === 'paid' ? 'bg-green-600 hover:bg-green-700' : 'bg-yellow-600 hover:bg-yellow-700'}
                        >
                          {item.status}
                        </Badge>
                    </div>
                    {item.status === 'paid' && (
                      <button 
                        onClick={() => { 
                          if (user) { 
                            generateTransactionPDF(item, user.displayName || user.email!, user.email!); 
                          } 
                        }} 
                        className="text-sm text-white hover:text-neutral-300 flex items-center gap-1.5"
                      >
                        <Download className="w-4 h-4"/> Invoice
                      </button>
                    )}
                </div>
            ))}
        </div>
     </div>
  );
}

function SubscriptionStatus() {
  const { user } = useAuth();
  const [subscription, setSubscription] = useState<SubscriptionState|null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!user) return;
    
    const fetchSubscription = async () => {
      try {
        // Get user document to check active plan and subscription status
        const userDoc = await getDoc(doc(db, "users", user.uid));
        const userData = userDoc.data();
        
        if (userData?.activePlan && userData.activePlan !== "Starter") {
          setSubscription({
            planName: userData.activePlan,
            status: userData.subscriptionStatus || "active",
          });
        }
      } catch (error) {
        console.error("Error fetching subscription:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchSubscription();
  }, [user]);

  if (loading) return null;

  if (!subscription || subscription.planName === "Starter") {
    return (
      <div className="mb-8">
        <Alert className="bg-neutral-900 border-neutral-800">
          <CreditCard className="h-4 w-4" />
          <AlertDescription>
            You&apos;re currently on the <strong>Starter</strong> plan. <Link href="/pricing" className="underline">Upgrade to unlock more credits</Link> and premium features.
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <div className="mb-8">
      <Card className="bg-gradient-to-br from-purple-900/20 to-blue-900/20 border-purple-700/50 p-6">
        <div className="flex items-start justify-between mb-4">
          <div>
            <p className="text-sm text-neutral-400">Active Subscription</p>
            <h3 className="text-2xl font-bold text-white">{subscription.planName} Plan</h3>
          </div>
          <Badge 
            variant={subscription.status === 'active' ? 'default' : 'secondary'}
            className={subscription.status === 'active' ? 'bg-green-600' : 'bg-yellow-600'}
          >
            {subscription.status}
          </Badge>
        </div>
        <p className="text-sm text-neutral-300 mb-4">
          Your subscription renews automatically each month. Credits are added to your account upon successful payment.
        </p>
        <div className="flex gap-3">
          <Link href="/pricing">
            <Button variant="outline" className="border-neutral-700">
              Change Plan
            </Button>
          </Link>
        </div>
      </Card>
    </div>
  );
}

// --- Main Page Component ---
export default function AccountPage() {
    const { user, credits } = useAuth();
    const [activePlan, setActivePlan] = useState("Starter");
    const [displayName, setDisplayName] = useState("");
    const [email, setEmail] = useState("");
    const [isSaving, setIsSaving] = useState(false);
    const [saveMessage, setSaveMessage] = useState<{ type: 'success' | 'error', text: string } | null>(null);

    useEffect(() => {
      if (!user) return;
      
      setDisplayName(user.displayName || "");
      setEmail(user.email || "");
      
      const userDocRef = doc(db, "users", user.uid);
      const unsubscribe = onSnapshot(userDocRef, (doc) => {
        if (doc.exists()) {
          const userData = doc.data();
          setActivePlan(userData?.activePlan || "Starter");
        }
      });

      return () => unsubscribe();
    }, [user]);

    const handleSaveChanges = async () => {
      if (!user) return;
      
      setIsSaving(true);
      setSaveMessage(null);
      
      try {
        const { updateProfile, updateEmail } = await import('firebase/auth');
        
        // Update display name if changed
        if (displayName !== user.displayName) {
          await updateProfile(user, { displayName });
        }
        
        // Update email if changed
        if (email !== user.email && email) {
          await updateEmail(user, email);
        }
        
        // Update Firestore user document
        const userDocRef = doc(db, "users", user.uid);
        await import('firebase/firestore').then(({ updateDoc }) => 
          updateDoc(userDocRef, {
            name: displayName,
            email: email
          })
        );
        
        setSaveMessage({ type: 'success', text: 'Account updated successfully!' });
        setTimeout(() => setSaveMessage(null), 3000);
      } catch (error) {
        console.error("Error updating account:", error);
        let errorMessage = "Failed to update account";
        
        if (error instanceof FirebaseError) {
          switch (error.code) {
            case 'auth/requires-recent-login':
              errorMessage = "Please sign out and sign in again to change your email";
              break;
            case 'auth/email-already-in-use':
              errorMessage = "This email is already in use";
              break;
            case 'auth/invalid-email':
              errorMessage = "Invalid email address";
              break;
            default:
              errorMessage = error.message;
              break;
          }
        } else if (error instanceof Error) {
            errorMessage = error.message;
        }
        
        setSaveMessage({ type: 'error', text: errorMessage });
      } finally {
        setIsSaving(false);
      }
    };

    const handleCancel = () => {
      setDisplayName(user?.displayName || "");
      setEmail(user?.email || "");
      setSaveMessage(null);
    };

    if (!user) {
        return <div className="text-white text-center pt-48">Loading user profile...</div>;
    }

    const inputStyles = "bg-transparent border-0 border-b border-neutral-700 rounded-none px-0 focus-visible:ring-0 focus-visible:border-b-white";

    return (
        <div className="bg-black text-white min-h-screen pt-32">
            <div className="container mx-auto py-16 px-4">
                {/* Header */}
                <div className="flex flex-col sm:flex-row items-center gap-6 mb-16 text-center sm:text-left">
                    <div className="w-24 h-24 rounded-full bg-gradient-to-br from-purple-600 to-blue-500 flex-shrink-0 flex items-center justify-center text-3xl font-bold">
                      {(user.displayName || user.email || "U")[0].toUpperCase()}
                    </div>
                    <div>
                        <h1 className="text-4xl font-bold">{user.displayName || "User"}</h1>
                        <p className="text-neutral-400">{user.email}</p>
                    </div>
                </div>

                {/* Subscription Status */}
                <SubscriptionStatus />

                {/* Main Grid */}
                <div className="grid lg:grid-cols-3 gap-8 lg:gap-16">
                    {/* Left Column - Stats & CTA */}
                    <div className="lg:col-span-1 space-y-12 order-2 lg:order-1">
                        <UsageStats />
                        <div>
                            <p className="text-neutral-300 mb-2">Need more credits?</p>
                            <Link href="/pricing">
                              <Button className="bg-[#D4FF4F] text-black hover:bg-[#c2ef4a] font-semibold w-full">
                                View Pricing Plans
                              </Button>
                            </Link>
                        </div>
                    </div>

                    {/* Right Column - Credits Display */}
                    <div className="lg:col-span-2 order-1 lg:order-2">
                       <Card className="bg-[#1C1C1C] border-neutral-800 p-8 text-center">
                            <p className="text-neutral-400 mb-2">Active Plan</p>
                            <p className="text-4xl font-bold mb-6">{activePlan}</p>
                            <Separator className="bg-neutral-800 mb-6" />
                            <p className="text-neutral-400 mb-2">Available Credits</p>
                            <p className="text-7xl font-bold mb-4">{credits}</p>
                            <p className="text-sm text-neutral-500">
                              {activePlan === "Starter" 
                                ? "One-time credits. Purchase more anytime." 
                                : "Monthly credits refresh automatically with your subscription."}
                            </p>
                       </Card>
                    </div>
                </div>

                <Separator className="my-16 bg-neutral-800" />

                {/* Bottom Grid - History & Settings */}
                <div className="grid lg:grid-cols-2 gap-16">
                    {/* Billing History */}
                    <BillingHistory />

                    {/* User Settings */}
                    <div>
                         <h2 className="font-semibold text-lg mb-4">Account Settings</h2>
                         
                         {saveMessage && (
                           <Alert className={`mb-4 ${saveMessage.type === 'success' ? 'bg-green-900/20 border-green-700' : 'bg-red-900/20 border-red-700'}`}>
                             <AlertDescription className={saveMessage.type === 'success' ? 'text-green-400' : 'text-red-400'}>
                               {saveMessage.text}
                             </AlertDescription>
                           </Alert>
                         )}
                         
                         <div className="space-y-4">
                            <div>
                              <label className="text-sm text-neutral-400 mb-1 block">Display Name</label>
                              <Input 
                                placeholder="Your name" 
                                value={displayName}
                                onChange={(e) => setDisplayName(e.target.value)}
                                className={inputStyles} 
                              />
                            </div>
                            <div>
                              <label className="text-sm text-neutral-400 mb-1 block">Email Address</label>
                              <Input 
                                type="email"
                                placeholder="your@email.com" 
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                className={inputStyles}
                              />
                              <p className="text-xs text-neutral-500 mt-1">
                                You may need to sign in again after changing your email
                              </p>
                            </div>
                            <div className="flex justify-end gap-4 pt-4">
                                <Button 
                                  variant="ghost" 
                                  onClick={handleCancel}
                                  disabled={isSaving}
                                >
                                  Cancel
                                </Button>
                                <Button 
                                  className="bg-white text-black hover:bg-neutral-200 font-semibold"
                                  onClick={handleSaveChanges}
                                  disabled={isSaving}
                                >
                                  {isSaving ? "Saving..." : "Save Changes"}
                                </Button>
                            </div>
                         </div>

                         {/* Payment Info Notice */}
                         <Card className="bg-neutral-900 border-neutral-800 p-4 mt-8">
                            <div className="flex gap-3">
                              <AlertCircle className="h-5 w-5 text-neutral-400 flex-shrink-0 mt-0.5" />
                              <div>
                                <p className="text-sm font-medium mb-1">Payment Management</p>
                                <p className="text-xs text-neutral-400">
                                  All payments are securely processed through PayTrust. To update your payment method or view detailed invoices, simply make a new purchase and use your preferred payment method.
                                </p>
                              </div>
                            </div>
                         </Card>
                    </div>
                </div>
            </div>
        </div>
    );
}
================================================================================
// FILE: ./src/app/pricing/page.tsx
================================================================================

"use client";

import { useState } from "react";
import { useAuth } from "@/context/AuthContext";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Check, Star, Loader2, AlertCircle } from "lucide-react";
import { cn } from "@/lib/utils";
import { useRouter } from "next/navigation";
import { Alert, AlertDescription } from "@/components/ui/alert";

const pricingTiers = [
  { 
    name: "Starter", 
    price: 0, 
    description: "For individuals and small projects", 
    features: [ 
      "10 Welcome Credits", 
      "Standard Generation Speed", 
      "Access to All Models" 
    ], 
    isFeatured: false, 
    isCurrent: true, 
  },
  { 
    name: "Creator", 
    price: 22, 
    description: "For frequent users and professionals", 
    features: [ 
      "250 Monthly Credits", 
      "Priority Generation Queue", 
      "Early Access to New Models", 
      "Standard Support" 
    ], 
    isFeatured: true, 
    isCurrent: false, 
    priceId: "price_YOUR_PRO_PLAN_PRICE_ID" // IMPORTANT: Replace with actual PayTrust price ID
  },
  { 
    name: "Pro", 
    price: 49, 
    description: "For teams and power users", 
    features: [ 
      "1000 Monthly Credits", 
      "Highest Priority Queue", 
      "API Access", 
      "Dedicated Support" 
    ], 
    isFeatured: false, 
    isCurrent: false, 
    priceId: "price_YOUR_TEAM_PLAN_PRICE_ID" // IMPORTANT: Replace with actual PayTrust price ID
  },
];

export default function PricingPage() {
  const { user } = useAuth();
  const router = useRouter();
  const [customAmount, setCustomAmount] = useState(10);
  const [isProcessing, setIsProcessing] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const processPurchase = async (details: { customAmount?: number; priceId?: string }) => {
    if (!user) {
      router.push('/signin');
      return;
    }

    const isSubscription = !!details.priceId;
    const loadingKey = isSubscription ? details.priceId! : 'custom';
    setIsProcessing(loadingKey);
    setError(null);

    const endpoint = isSubscription ? '/create-subscription' : '/create-payment';
    const body = isSubscription 
      ? JSON.stringify({ userId: user.uid, priceId: details.priceId })
      : JSON.stringify({ userId: user.uid, customAmount: details.customAmount });

    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_BASE_URL}${endpoint}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: body,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || "Failed to initiate payment");
      }

      const data = await response.json();

      if (data.paymentUrl) {
        // Redirect to PayTrust payment page
        window.location.href = data.paymentUrl;
      } else {
        throw new Error("Payment URL not received from server");
      }
    } catch (error) {
      console.error("Payment initiation failed:", error);
      setError(`Could not initiate payment: ${(error as Error).message}`);
      setIsProcessing(null);
    }
  };

  const handleCustomAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseInt(e.target.value);
    if (!isNaN(value) && value >= 0) {
      setCustomAmount(value);
    } else if (e.target.value === '') {
      setCustomAmount(0);
    }
  };

  const isValidCustomAmount = customAmount > 0 && customAmount <= 1000; // Max €1000

  const inputStyles = "bg-transparent border-0 border-b border-neutral-700 rounded-none px-0 text-xl h-12 focus-visible:ring-0 focus-visible:border-b-white";

  return (
    <div className="bg-black text-white min-h-screen pt-32 w-full">
      <div className="w-full md:px-28 px-4 py-16  py-16 md:py-24">
        {/* Header */}
        <div className="text-center mx-auto mb-16">
          <h1 className="text-7xl md:text-8xl font-extrabold tracking-tighter">Get more done</h1>
          <p className="mt-4 text-lg text-neutral-400">Choose the plan that fits your creative needs.</p>
        </div>

        {/* Error Alert */}
        {error && (
          <div className="w-full px-4 mt-8">
            <Alert variant="destructive" className="bg-red-900/20 border-red-900">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          </div>
        )}

        {/* Pricing Tiers */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 w-full px-4 mt-16">
          {pricingTiers.map((tier) => (
            <Card 
              key={tier.name} 
              className={cn(
                "flex flex-col bg-[#1C1C1C] border-neutral-800", 
                { "border-2 border-[#D4FF4F] relative": tier.isFeatured }
              )}
            >
              {tier.isFeatured && (
                <Badge className="absolute -top-4 left-1/2 -translate-x-1/2 bg-[#D4FF4F] text-black">
                  <Star className="h-4 w-4 mr-1" /> Best Value
                </Badge>
              )}
              
              <CardHeader>
                <CardTitle className="text-2xl font-bold">{tier.name}</CardTitle>
                <CardDescription className="text-neutral-400">{tier.description}</CardDescription>
              </CardHeader>
              
              <CardContent className="flex-grow flex flex-col">
                <div className="text-6xl font-bold my-4">
                  ${tier.price}
                  <span className="text-lg font-normal text-neutral-500">/mo</span>
                </div>
                <ul className="space-y-3 text-sm text-neutral-300">
                  {tier.features.map((feature, index) => (
                    <li key={index} className="flex items-center">
                      <Check className="h-4 w-4 mr-2 text-[#D4FF4F] flex-shrink-0" />
                      <span>{feature}</span>
                    </li>
                  ))}
                </ul>
              </CardContent>
              
              <CardFooter>
                <Button 
                  className={cn(
                    "w-full font-semibold", 
                    tier.isFeatured 
                      ? "bg-[#D4FF4F] text-black hover:bg-[#c2ef4a]" 
                      : "bg-white text-black hover:bg-neutral-200"
                  )} 
                  disabled={tier.isCurrent || isProcessing === tier.priceId || !tier.priceId}
                  onClick={() => tier.priceId && processPurchase({ priceId: tier.priceId })}
                >
                  {isProcessing === tier.priceId ? (
                    <Loader2 className="animate-spin h-5 w-5" />
                  ) : tier.isCurrent ? (
                    "Current Plan"
                  ) : (
                    "Upgrade"
                  )}
                </Button>
              </CardFooter>
            </Card>
          ))}
        </div>

        {/* Custom Amount Section */}
        <div className="mt-24 w-full px-4">
          <div className="flex flex-col md:flex-row justify-between md:items-end gap-4">
            <h2 className="text-7xl md:text-8xl font-extrabold tracking-tighter mb-4 md:mb-0">
              Custom amount
            </h2>
            
            <div className="flex flex-wrap items-center gap-4">
              <Input 
                type="number" 
                value={customAmount || ''} 
                onChange={handleCustomAmountChange}
                placeholder="eg: 10$" 
                className={`${inputStyles} w-32`}
                min="1"
              />
              <p className="text-2xl text-neutral-400">x 10 =</p>
              <p className="text-2xl font-bold">{customAmount * 10} credits</p>
              <Button 
                variant="brand-outline" 
                className="bg-white text-black hover:bg-neutral-200 font-semibold" 
                onClick={() => processPurchase({ customAmount })} 
                disabled={isProcessing === 'custom' || customAmount <= 0}
              >
                {isProcessing === 'custom' ? (
                  <Loader2 className="animate-spin h-5 w-5" />
                ) : (
                  "Purchase Credits"
                )}
              </Button>
            </div>
          </div>
          
          {/* Info text */}
          <p className="text-sm text-neutral-500 mt-6 text-center md:text-right">
            Purchase any amount of credits at $1 = 10 credits
          </p>
        </div>
      </div>
    </div>
  );
}
================================================================================
// FILE: ./src/components/Navbar.tsx
================================================================================

"use client";

import Link from 'next/link';
import { useAuth } from '@/context/AuthContext';
import { Button } from '@/components/ui/button';
import { Menu, X } from 'lucide-react';
import { useState, useEffect } from 'react';

export default function Navbar() {
  const { user } = useAuth();
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  useEffect(() => {
    if (isMenuOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'auto';
    }
    return () => {
      document.body.style.overflow = 'auto';
    };
  }, [isMenuOpen]);

  const navLinks = [
    { href: "/explore", label: "Explore" },
    { href: "/pricing", label: "Pricing" },
    { href: "/about", label: "About Us" },
    { href: "/contact", label: "Contact Us" },
  ];

  const getInitial = () => {
    if (user?.displayName) {
      return user.displayName.charAt(0).toUpperCase();
    }
    if (user?.email) {
      return user.email.charAt(0).toUpperCase();
    }
    return '?';
  };

  return (
    <>
      <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/95 flex items-center justify-center">
        <div className="container flex h-20 items-center justify-between">
          <Link href="/" className="flex items-center space-x-2 text-2xl font-bold" onClick={() => setIsMenuOpen(false)}>
            <span>reelzila</span>
          </Link>
          
          <nav className="hidden md:flex items-center space-x-6 text-sm font-medium">
            {navLinks.map(link => (
              <Link key={link.href} href={link.href} className="hover:text-neutral-300 transition-colors">{link.label}</Link>
            ))}
          </nav>
          
          <div className="flex items-center space-x-4">
            <div className="hidden md:block">
              {user ? (
                 <Link href="/account" className="block">
                   {/* THE FIX: Conditional rendering for the user's profile picture */}
                   {user.photoURL ? (
                     <img 
                       src={user.photoURL} 
                       alt="User profile picture" 
                       className="h-8 w-8 rounded-full" 
                     />
                   ) : (
                     <div className="h-8 w-8 rounded-full bg-gradient-to-br from-purple-500 to-indigo-600 flex items-center justify-center text-sm font-bold text-white">
                       {getInitial()}
                     </div>
                   )}
                 </Link>
              ) : (
                <Link href="/signin">
                  <Button variant="outline" className="bg-transparent border-white text-white hover:bg-white hover:text-black">
                    Sign In
                  </Button>
                </Link>
              )}
            </div>
            <div className="md:hidden">
              <Button variant="ghost" size="icon" onClick={() => setIsMenuOpen(!isMenuOpen)}>
                {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
              </Button>
            </div>
          </div>
        </div>
      </header>

      {isMenuOpen && (
        <div className="md:hidden fixed inset-0 top-20 z-40 bg-black flex flex-col items-center justify-center text-center">
          <nav className="flex flex-col items-center space-y-8">
            {navLinks.map(link => (
              <Link key={link.href} href={link.href} className="text-3xl font-semibold hover:text-neutral-300 transition-colors" onClick={() => setIsMenuOpen(false)}>
                {link.label}
              </Link>
            ))}
          </nav>
          <div className="mt-12">
            {user ? (
               <Link href="/account" onClick={() => setIsMenuOpen(false)}>
                  <Button size="lg" variant="brand-solid">View Account</Button>
               </Link>
            ) : (
              <Link href="/signin" onClick={() => setIsMenuOpen(false)}>
                <Button size="lg" variant="brand-solid">
                  Sign In
                </Button>
              </Link>
            )}
          </div>
        </div>
      )}
    </>
  );
}
================================================================================
// FILE: ./src/components/TipsSection.tsx
================================================================================

"use client";

import { Card, CardContent } from "@/components/ui/card";
import { Check } from "lucide-react";
import { Separator } from "@/components/ui/separator";

// Using the same interfaces from modelConfig.ts for type safety
interface TipContent {
  subtitle: string;
  text: string;
  list?: string[];
}

interface TipSection {
  title: string;
  content: TipContent[];
}

interface TipsSectionProps {
  tips?: TipSection[];
}

export function TipsSection({ tips }: TipsSectionProps) {
  if (!tips || tips.length === 0) {
    return null; // Don't render anything if there are no tips
  }

  return (
    <section className="w-full mx-auto">
      {tips.map((section, sectionIndex) => (
        <div key={sectionIndex} className="mb-12">
          <h2 className="text-3xl font-bold tracking-tight mb-6">{section.title}</h2>
          
          {/* THE FIX: A single card now wraps all the tip items for this section. */}
          <Card>
            <CardContent className="p-6">
              {section.content.map((item, itemIndex) => (
                <div key={itemIndex}>
                  {/* Replicating the previous CardHeader style */}
                  <h3 className="text-xl font-semibold leading-none tracking-tight">
                    {item.subtitle}
                  </h3>
                  
                  {/* Replicating the previous CardContent style */}
                  <div className="mt-4">
                    <p className="text-muted-foreground">{item.text}</p>
                    {item.list && (
                      <ul className="mt-4 space-y-2">
                        {item.list.map((listItem, listIndex) => (
                          <li key={listIndex} className="flex items-start">
                            <Check className="h-5 w-5 mr-2 mt-1 text-green-500 flex-shrink-0" />
                            <span className="text-muted-foreground">{listItem}</span>
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>

                  {/* Add a separator between items, but not after the last one */}
                  {itemIndex < section.content.length - 1 && (
                    <Separator className="my-6" />
                  )}
                </div>
              ))}
            </CardContent>
          </Card>
        </div>
      ))}
    </section>
  );
}
================================================================================
// FILE: ./src/components/HoverVideoPlayer.tsx
================================================================================

"use client";

import React, { useRef } from 'react';

interface HoverVideoPlayerProps {
  src: string;
  className?: string;
}

export const HoverVideoPlayer: React.FC<HoverVideoPlayerProps> = ({ src, className }) => {
  const videoRef = useRef<HTMLVideoElement>(null);

  const handleMouseEnter = () => {
    videoRef.current?.play();
  };

  const handleMouseLeave = () => {
    videoRef.current?.pause();
    if (videoRef.current) {
        videoRef.current.currentTime = 0; // Rewind to start
    }
  };

  return (
    <div 
      onMouseEnter={handleMouseEnter} 
      onMouseLeave={handleMouseLeave}
      className="w-full h-full"
    >
      <video
        ref={videoRef}
        src={src}
        loop
        muted
        playsInline
        className={`w-full h-full object-cover pointer-events-none ${className}`}
      />
    </div>
  );
};
================================================================================
// FILE: ./src/components/LayoutManager.tsx
================================================================================

// FILE: ./src/components/LayoutManager.tsx
"use client";

import { usePathname } from "next/navigation";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";

export default function LayoutManager({
  children,
}: {
  children: React.ReactNode;
}) {
  const pathname = usePathname();
  const isHomePage = pathname === '/';

  return (
    <>
      <Navbar />
      {/*
        If it's the homepage, the page itself (`src/app/page.tsx`) handles
        the full-screen scroll container, so `main` doesn't need flex-grow.
        For all other pages, `flex-grow` ensures the content pushes the
        footer down to the bottom of the viewport.
      */}
      <main className={!isHomePage ? "flex-grow" : ""}>{children}</main>
      {/*
        Conditionally render the Footer. It will not appear on the homepage
        because the homepage includes it in its final snap-scroll section.
      */}
      {<Footer />}
    </>
  );
}
================================================================================
// FILE: ./src/components/DynamicBanner.tsx
================================================================================

"use client";

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { motion, AnimatePresence } from 'framer-motion';

// Define the structure for each slide's content
export interface BannerSlide {
  videoSrc: string;
  title: React.ReactNode; // Allow for complex titles with <br />
  subtitle: string;
  buttonText: string;
  buttonLink: string;
}

interface DynamicBannerProps {
  slides: BannerSlide[];
}

export const DynamicBanner: React.FC<DynamicBannerProps> = ({ slides }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const currentSlide = slides[currentIndex];

  const handleVideoEnd = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % slides.length);
  };

  return (
    <section className="relative h-[70vh] w-full flex items-center justify-start text-left text-white overflow-hidden">
      <AnimatePresence>
        <motion.video
          key={currentSlide.videoSrc}
          src={currentSlide.videoSrc}
          autoPlay
          muted
          playsInline
          onEnded={handleVideoEnd}
          className="absolute top-0 left-0 w-full h-full object-cover z-0"
          initial={{ opacity: 0, scale: 1.1 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 1.5, ease: "easeInOut" }}
        />
      </AnimatePresence>
      <div className="absolute inset-0 bg-black/50 z-10" />

      <div className="container mx-auto relative z-20 px-4">
        <AnimatePresence mode="wait">
          <motion.div
            key={currentIndex}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.7, ease: "circOut" }}
            className="max-w-2xl"
          >
            <h1 className="text-5xl md:text-7xl font-extrabold tracking-tighter leading-tight">
              {currentSlide.title}
            </h1>
            <p className="mt-4 text-lg md:text-xl text-neutral-300">
              {currentSlide.subtitle}
            </p>
            <Button size="lg" className="mt-8 bg-white text-black hover:bg-neutral-200 font-semibold">
              {currentSlide.buttonText}
            </Button>
          </motion.div>
        </AnimatePresence>
      </div>
      
      {/* Dynamic Page Indicator Bars */}
      <div className="absolute bottom-0 left-0 w-full h-1.5 z-20 flex">
        {slides.map((_, index) => (
          <div key={index} className="flex-1 h-full bg-white/20">
            {index === currentIndex && (
              <motion.div
                className="h-full bg-white"
                initial={{ width: '0%' }}
                animate={{ width: '100%' }}
                transition={{ duration: 7, ease: 'linear' }} // Match your longest video duration
              />
            )}
          </div>
        ))}
      </div>
    </section>
  );
};
================================================================================
// FILE: ./src/components/ModelGallery.tsx
================================================================================

import Link from "next/link";
import { Badge } from "@/components/ui/badge";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import { Button } from "@/components/ui/button"

const models = [
    {
    id: "flux-kontext-pro",
    name: "FLUX Kontext Pro",
    tag: "image-to-image",
    imageUrl: "/texture-02.avif",
  },
  {
    id: "veo-3-fast",
    name: "Veo 3",
    tag: "text-to-video",
    imageUrl: "/texture-01.avif",
  },
  {
    id: "seedance-1-pro",
    name: "Seedance-1 Pro",
    tag: "text-to-video",
    imageUrl: "/texture-02.avif",
  },
  {
    id: "wan-2.2",
    name: "Wan-2.2",
    tag: "image-to-video",
    imageUrl: "/texture-01.avif",
  },
];

export function ModelGallery() {
  return (
    <section id="model-gallery" className="w-full py-16 md:py-24 lg:py-32 bg-background">
      <div className="container px-4 md:px-6">
        <h2 className="text-3xl font-bold tracking-tighter mb-8">Model Gallery</h2>
        
        {/* The Carousel component now has a relative class for arrow positioning */}
        <Carousel opts={{ align: "start", loop: true }} className="w-full relative">
          <CarouselContent className="-ml-4">
            {models.map((model, index) => (
              <CarouselItem key={index} className="pl-4 md:basis-1/2 lg:basis-1/3">
                <Link href={model.id ? `/generator?model=${model.id}` : "#"} className="group block h-full">
                  
                  <div
                    className="h-80 w-full rounded-lg overflow-hidden relative bg-cover bg-center transition-all duration-300 ease-in-out group-hover:scale-105"
                    style={{ backgroundImage: `url(${model.imageUrl})` }}
                  >
                    {/* Dark overlay for text readability */}
                    <div className="absolute inset-0 bg-gradient-to-t from-black/80 to-black/10 group-hover:from-black/70"></div>
                    
                    {/* Content is relative to be on top of the overlay */}
                    <div className="relative z-10 flex flex-col justify-end h-full p-6 text-white">
                      <h3 className="text-4xl font-bold drop-shadow-lg">{model.name}</h3>
                      <Badge variant="secondary" className="mt-2 w-fit">{model.tag}</Badge>
                    </div>
                  </div>
                </Link>
              </CarouselItem>
            ))}
          </CarouselContent>
          
          {/* --- THE FIX IS HERE --- */}
          {/* The `lg:hidden` class has been removed, so these arrows are now always visible */}
          {/* Added positioning classes for better placement on large screens */}
          <div>
            <CarouselPrevious className="absolute left-[-50px] top-1/2 -translate-y-1/2 hidden lg:flex" />
            <CarouselNext className="absolute right-[-50px] top-1/2 -translate-y-1/2 hidden lg:flex" />
          </div>
        </Carousel>
                <div className="mt-8 text-center">
            <Link href="/explore">
                <Button variant="outline">Explore All Models</Button>
            </Link>
        </div>
      </div>
    </section>
  );
}
================================================================================
// FILE: ./src/components/Footer.tsx
================================================================================

// FILE: ./src/components/Footer.tsx
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Separator } from '@/components/ui/separator';
import { Twitter, Instagram, Linkedin, ArrowRight } from 'lucide-react';

export default function Footer() {
  return (
    <footer className="bg-black border-t border-neutral-800">
      <div className="container mx-auto py-24 px-4 md:px-6">
        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-8">
          
          <div className="col-span-2 lg:col-span-1">
            <Link href="/" className="flex items-center space-x-2 mb-4">
              <span className="text-xl font-bold">reelzila</span>
            </Link>
            <p className="text-sm text-muted-foreground">
              Transforming your text into stunning, high-definition videos with the power of AI.
            </p>
          </div>

          <div className="space-y-4">
            <h3 className="font-semibold text-foreground">Product</h3>
            {/* THE FIX: Updated links to point to real pages/sections */}
            <ul className="space-y-2">
              <li><Link href="/pricing" className="text-sm text-muted-foreground hover:text-primary">Pricing</Link></li>
              <li><Link href="/explore" className="text-sm text-muted-foreground hover:text-primary">Explore</Link></li>
              <li><Link href="/#model-gallery" className="text-sm text-muted-foreground hover:text-primary">Inspiration</Link></li>
              <li><Link href="/signin" className="text-sm text-muted-foreground hover:text-primary">Sign In</Link></li>
            </ul>
          </div>

          <div className="space-y-4">
            <h3 className="font-semibold text-foreground">Company</h3>
            {/* THE FIX: Updated links to point to real pages */}
            <ul className="space-y-2">
              <li><Link href="/about" className="text-sm text-muted-foreground hover:text-primary">About Us</Link></li>
              <li><Link href="/contact" className="text-sm text-muted-foreground hover:text-primary">Contact</Link></li>
            </ul>
          </div>
          
          <div className="space-y-4">
            <h3 className="font-semibold text-foreground">Legal</h3>
            {/* THE FIX: Updated links to point to placeholder pages */}
            <ul className="space-y-2">
              <li><Link href="/terms" className="text-sm text-muted-foreground hover:text-primary">Terms of Service</Link></li>
              <li><Link href="/privacy" className="text-sm text-muted-foreground hover:text-primary">Privacy Policy</Link></li>
              <li><Link href="/cookies" className="text-sm text-muted-foreground hover:text-primary">Cookie Policy</Link></li>
            </ul>
          </div>

          <div className="col-span-2 md:col-span-4 lg:col-span-1">
             <h3 className="font-semibold text-foreground">Stay Updated</h3>
             <p className="text-sm text-muted-foreground mt-2 mb-4">Get the latest news on features and releases.</p>
             <form className="flex w-full max-w-sm items-center space-x-2">
                <Input type="email" placeholder="Enter your email" />
                <Button type="submit" size="icon">
                    <ArrowRight className="h-4 w-4" />
                </Button>
            </form>
          </div>
        </div>

        <Separator className="my-8 bg-neutral-800" />

        <div className="flex flex-col sm:flex-row justify-between items-center gap-4">
          <p className="text-sm text-muted-foreground">
            © {new Date().getFullYear()} reelzila. All Rights Reserved.
          </p>
          <div className="flex space-x-4">
            <Link href="#"><Twitter className="h-5 w-5 text-muted-foreground hover:text-primary" /></Link>
            <Link href="#"><Instagram className="h-5 w-5 text-muted-foreground hover:text-primary" /></Link>
            <Link href="#"><Linkedin className="h-5 w-5 text-muted-foreground hover:text-primary" /></Link>
          </div>
        </div>
      </div>
    </footer>
  );
}
================================================================================
// FILE: ./src/components/WelcomePage.tsx
================================================================================

"use client"
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Zap, Film, Sparkles, ArrowRight, Rocket } from 'lucide-react';
import { ModelGallery } from './ModelGallery';
import { useAuth } from '@/context/AuthContext'; // Import the useAuth hook

export function WelcomePage() {
    // Get the current user's authentication state
  const { user } = useAuth();

  return (
    <div className="flex flex-col min-h-screen">
      <main className="flex-1">
        {/* Hero Section */}
        <section className="w-full py-20 md:py-32 lg:py-40 bg-gradient-to-br from-gray-50 to-gray-200 dark:from-gray-900 dark:to-gray-800 rounded-2xl "
        style={{ backgroundImage: `url(/top-no-text.png)` }}>
          <div className="container px-4 md:px-6 text-center">
            <div className="max-w-3xl mx-auto">
              <h1 className="text-4xl font-extrabold tracking-tighter sm:text-5xl md:text-6xl lg:text-7xl">
                Create Breathtaking Video with AI
              </h1>
              <p className="mt-4 text-lg  md:text-xl">
                VX AI leverages the power of state-of-the-art AI models to transform your text prompts into stunning, high-definition videos.
              </p>
              <div className="mt-8 flex flex-col sm:flex-row gap-4 justify-center">
                <Link href={user ? "#model-gallery" : "/signup"}>
                  <Button size="lg" className="w-full sm:w-auto">
                    {/* Change text and behavior based on login state */}
                    {user ? "Explore Models" : "Get Started for Free"}
                    <ArrowRight className="ml-2 h-5 w-5" />
                  </Button>
                </Link>
                <Link href="#features">
                   <Button size="lg" variant="outline" className="w-full sm:w-auto">
                    Learn More
                  </Button>
                </Link>
              </div>
            </div>
          </div>
        </section>

        {/* Features Section */}
        <section id="features" className="w-full py-16">
          <div className="container px-4 md:px-6">
            <div className="grid gap-10 sm:grid-cols-2 lg:grid-cols-3">
              <div className="flex flex-col items-center text-center">
                <div className="flex items-center justify-center rounded-full bg-primary/10 p-4 mb-4">
                   <Zap className="h-8 w-8 text-primary" />
                </div>
                <h3 className="text-xl font-bold">Instant Video Creation</h3>
                <p className="mt-2 text-muted-foreground">
                  No more complex software. Just type your idea and watch it come to life in seconds.
                </p>
              </div>
               <div className="flex flex-col items-center text-center">
                <div className="flex items-center justify-center rounded-full bg-primary/10 p-4 mb-4">
                   <Film className="h-8 w-8 text-primary" />
                </div>
                <h3 className="text-xl font-bold">Unmatched Quality</h3>
                <p className="mt-2 text-muted-foreground">
                  Powered by the best models like Google&apos;s VEO-3 for cinematic quality, realism, and visual coherence.
                </p>
              </div>
               <div className="flex flex-col items-center text-center">
                <div className="flex items-center justify-center rounded-full bg-primary/10 p-4 mb-4">
                   <Sparkles className="h-8 w-8 text-primary" />
                </div>
                <h3 className="text-xl font-bold">Simple Credit System</h3>
                <p className="mt-2 text-muted-foreground">
                  Start with 10 free credits. Generate videos as you go with a clear, straightforward system.
                </p>
              </div>
            </div>
          </div>
        </section>

          <ModelGallery/>


        {/* How It Works Section */}
        <section className="w-full py-16 md:pb-24 lg:pb-32 mb-32 bg-muted">
            <div className="container grid items-center justify-center gap-4 px-4 text-center md:px-6">
                <div className="space-y-3">
                    <h2 className="text-3xl font-bold tracking-tighter md:text-4xl">From Prompt to Production in 3 Easy Steps</h2>
                    <p className="mx-auto max-w-[600px] text-muted-foreground md:text-xl">Our intuitive platform makes video creation accessible to everyone.</p>
                </div>
                <div className="mx-auto w-full max-w-5xl mt-8">
                   <div className="grid md:grid-cols-3 gap-8">
                       <Card>
                           <CardHeader>
                               <CardTitle className="flex items-center gap-2"><div className="rounded-full border border-primary w-8 h-8 flex items-center justify-center">1</div> Describe</CardTitle>
                           </CardHeader>
                           <CardContent>Write a detailed text prompt describing the video you envision.</CardContent>
                       </Card>
                       <Card>
                           <CardHeader>
                               <CardTitle className="flex items-center gap-2"><div className="rounded-full border border-primary w-8 h-8 flex items-center justify-center">2</div> Generate</CardTitle>
                           </CardHeader>
                           <CardContent>Our AI analyzes your prompt and renders your video in moments.</CardContent>
                       </Card>
                       <Card>
                           <CardHeader>
                               <CardTitle className="flex items-center gap-2"><div className="rounded-full border border-primary w-8 h-8 flex items-center justify-center">3</div> Download</CardTitle>
                           </CardHeader>
                           <CardContent>Review your creation, save it to your gallery, and use it anywhere.</CardContent>
                       </Card>
                   </div>
                </div>
            </div>
        </section>
        {/* --- NEW FINAL CTA SECTION --- */}
        <section  className="w-full py-16 md:py-8 lg:py-8">
          <div  className="container">
            <div style={{ backgroundImage: `url(/bottom-no-text.png)` }} className="mx-auto max-w-5xl rounded-2xl bg-primary text-primary-foreground p-8 md:p-12 lg:p-16 text-center shadow-lg">
              <Rocket className="h-12 w-12 mx-auto mb-4" />
              <h2 className="text-3xl font-extrabold tracking-tighter sm:text-4xl md:text-5xl">
                Ready to Start Creating?
              </h2>
              <p className="mx-auto mt-4 max-w-xl text-lg text-primary-foreground/80">
                Sign up today to receive your free welcome credits and begin transforming your ideas into incredible videos in just a few clicks.
              </p>
              <div className="mt-8 flex flex-col sm:flex-row gap-4 justify-center">
                <Link href={user ? "#model-gallery" : "/signup"}>
                  <Button size="lg" variant="secondary" className="w-full sm:w-auto"> 
                    {/* Change text and behavior based on login state */}
                    {user ? "Start Creating Now" : "Get Started for Free"}
                  </Button>
                </Link>
                <Link href="/pricing">
                  <Button size="lg" variant="outline" className="w-full sm:w-auto bg-primary text-primary-foreground hover:bg-primary/90"> 
                    View Pricing
                  </Button>
                </Link>
              </div>
            </div>
          </div>
        </section>
      </main>
    </div>
  );
}

================================================================================
// FILE: ./src/components/ModelCard.tsx
================================================================================

// FILE: ./src/components/ModelCard.tsx
"use client";

import Link from "next/link";
import { Badge } from "@/components/ui/badge";
import { Card } from "@/components/ui/card";
import { HoverVideoPlayer } from "@/components/HoverVideoPlayer";

interface Model {
  id: string;
  displayName: string;
  description: string;
  tags: string[];
  cardVideo: string;
  outputType: 'video' | 'image';
}

interface ModelCardProps {
  model: Model;
}

export const ModelCard: React.FC<ModelCardProps> = ({ model }) => {
  return (
    <Link href={`/generator?model=${model.id}`} className="group">
      <Card className="bg-[#1C1C1C] border-neutral-800 rounded-2xl p-4 transition-all md:h-full group-hover:ring-2 group-hover:ring-white/50 overflow-hidden min-w-80">
        {/* 
          THE FIX: Added `min-w-80` (320px).
          - This prevents the card from shrinking below a readable width on mobile.
          - When the parent's `w-4/5` becomes smaller than 320px, this rule takes precedence,
            forcing the horizontal scroll to activate instead of squishing the card content.
        */}
        <div className="aspect-video rounded-lg overflow-hidden">
          <HoverVideoPlayer src={model.cardVideo} />
        </div>
        <div className="p-4">
          <Badge variant="outline" className="border-neutral-500 text-neutral-300 capitalize">{model.outputType}</Badge>
          <h3 className="text-xl font-bold mt-4 text-white">{model.displayName}</h3>
          <p className="text-neutral-400 mt-2 text-sm line-clamp-2">{model.description}</p>
          <div className="flex gap-2 mt-4">
            {model.tags.map(tag => <Badge key={tag} className="bg-neutral-700 text-neutral-200 hover:bg-neutral-600">{tag}</Badge>)}
          </div>
        </div>
      </Card>
    </Link>
  );
};
================================================================================
// FILE: ./src/components/ThemeProvider.tsx
================================================================================

"use client"

import * as React from "react"
// --- THE FIX: Import ThemeProviderProps directly from "next-themes" ---
import { ThemeProvider as NextThemesProvider, type ThemeProviderProps } from "next-themes"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
================================================================================
// FILE: ./src/components/HistoryCard.tsx
================================================================================

"use client";

import { Card } from "@/components/ui/card";
import { AspectRatio } from "@/components/ui/aspect-ratio";

interface Generation {
  id: string;
  outputUrl: string;
  outputType: 'video' | 'image';
  prompt: string;
  createdAt: {
    toDate: () => Date;
  };
}

interface HistoryCardProps {
  item: Generation;
}

export const HistoryCard: React.FC<HistoryCardProps> = ({ item }) => {
  return (
    <div className="w-80 flex-shrink-0">
      <Card className="overflow-hidden rounded-2xl relative group">
        <AspectRatio ratio={1 / 1} className="bg-neutral-800">
          {item.outputType === 'video' ? (
            <video src={item.outputUrl} muted loop autoPlay className="w-full h-full object-cover" />
          ) : (
            <img src={item.outputUrl} alt={item.prompt || "Generated image"} className="w-full h-full object-cover" />
          )}
        </AspectRatio>
        <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent" />
        <div className="absolute bottom-0 left-0 p-4 text-white">
          <p className="font-medium line-clamp-2">{item.prompt}</p>
          <p className="text-xs text-neutral-400 mt-1">
            {item.createdAt?.toDate().toLocaleDateString('en-US', { day: 'numeric', month: 'short', year: 'numeric' })}
          </p>
        </div>
      </Card>
    </div>
  );
};
================================================================================
// FILE: ./src/components/PaymentFormPopup.tsx
================================================================================

// src/components/PaymentFormPopup.tsx
"use client";

import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader2 } from "lucide-react";

export interface BillingDetails {
  nameOnCard: string;
  address: string;
  city: string;
  state: string;
  cardNumber: string;
  expiry: string;
  cvv: string;
}

interface PaymentFormPopupProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (details: BillingDetails) => void;
  isProcessing: boolean;
}

export const PaymentFormPopup: React.FC<PaymentFormPopupProps> = ({ isOpen, onClose, onSubmit, isProcessing }) => {
  const [details, setDetails] = useState<BillingDetails>({
    nameOnCard: "", address: "", city: "", state: "",
    cardNumber: "", expiry: "", cvv: "",
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setDetails({ ...details, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(details);
  };
  
  const inputStyles = "bg-transparent border-0 border-b border-neutral-700 rounded-none px-0 text-base h-10 focus-visible:ring-0 focus-visible:border-b-white transition-colors";

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="bg-[#1C1C1C] border-neutral-800 text-white">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold">Billing Information</DialogTitle>
          <DialogDescription className="text-neutral-400">
            Your card details are sent securely to our payment provider and are not stored on our servers.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-8 pt-4">
          <div className="grid gap-2">
            <Label htmlFor="nameOnCard">Name on Card</Label>
            <Input id="nameOnCard" name="nameOnCard" onChange={handleChange} className={inputStyles} />
          </div>

          <div className="grid grid-cols-6 gap-4">
            <div className="grid gap-2 col-span-6">
                <Label htmlFor="cardNumber">Card Number</Label>
                <Input id="cardNumber" name="cardNumber" onChange={handleChange} className={inputStyles} />
            </div>
            <div className="grid gap-2 col-span-3">
                <Label htmlFor="expiry">Expiry (MM/YY)</Label>
                <Input id="expiry" name="expiry" onChange={handleChange} className={inputStyles} />
            </div>
            <div className="grid gap-2 col-span-3">
                <Label htmlFor="cvv">CVV</Label>
                <Input id="cvv" name="cvv" onChange={handleChange} className={inputStyles} />
            </div>
          </div>
          
          <div className="grid gap-2">
            <Label htmlFor="address">Address</Label>
            <Input id="address" name="address" onChange={handleChange} className={inputStyles} />
          </div>

          <div className="grid grid-cols-2 gap-4">
             <div className="grid gap-2">
                <Label htmlFor="city">City</Label>
                <Input id="city" name="city" onChange={handleChange} className={inputStyles} />
            </div>
             <div className="grid gap-2">
                <Label htmlFor="state">State / Province</Label>
                <Input id="state" name="state" onChange={handleChange} className={inputStyles} />
            </div>
          </div>
          
          <Button type="submit" size="lg" className="w-full bg-[#D4FF4F] text-black font-bold hover:bg-[#c2ef4a] text-lg transition-colors" disabled={isProcessing}>
            {isProcessing ? <Loader2 className="animate-spin" /> : "Confirm and Pay"}
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  );
};
================================================================================
// FILE: ./src/components/ui/aspect-ratio.tsx
================================================================================

"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

function AspectRatio({
  ...props
}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {
  return <AspectRatioPrimitive.Root data-slot="aspect-ratio" {...props} />
}

export { AspectRatio }

================================================================================
// FILE: ./src/components/ui/card.tsx
================================================================================

import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}

================================================================================
// FILE: ./src/components/ui/slider.tsx
================================================================================

"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }

================================================================================
// FILE: ./src/components/ui/progress.tsx
================================================================================

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }

================================================================================
// FILE: ./src/components/ui/label.tsx
================================================================================

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }

================================================================================
// FILE: ./src/components/ui/alert.tsx
================================================================================

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }

================================================================================
// FILE: ./src/components/ui/dialog.tsx
================================================================================

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}

================================================================================
// FILE: ./src/components/ui/badge.tsx
================================================================================

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }

================================================================================
// FILE: ./src/components/ui/separator.tsx
================================================================================

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}

export { Separator }

================================================================================
// FILE: ./src/components/ui/button.tsx
================================================================================

// FILE: ./src/components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-semibold transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
        
        "brand-solid": 
          "bg-white text-black shadow-xs text-xl font-medium hover:bg-neutral-200 tracking-tight h-14",
        "brand-outline":
          "border border-white bg-transparent text-white shadow-xs hover:bg-white hover:text-black",
        
        // --- MODIFIED BRAND VARIANT ---
        "brand-lime":
          "bg-[#D4FF4F] text-black font-bold hover:bg-[#c2ef4a] transition-colors",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8  gap-1.5 px-3 has-[>svg]:px-2.5",
        // --- MODIFIED LG SIZE ---
        lg: "h-14 px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
================================================================================
// FILE: ./src/components/ui/select.tsx
================================================================================

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}

================================================================================
// FILE: ./src/components/ui/textarea.tsx
================================================================================

import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }

================================================================================
// FILE: ./src/components/ui/input.tsx
================================================================================

import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }

================================================================================
// FILE: ./src/components/ui/skeleton.tsx
================================================================================

import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }

================================================================================
// FILE: ./src/components/ui/carousel.tsx
================================================================================

"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

function Carousel({
  orientation = "horizontal",
  opts,
  setApi,
  plugins,
  className,
  children,
  ...props
}: React.ComponentProps<"div"> & CarouselProps) {
  const [carouselRef, api] = useEmblaCarousel(
    {
      ...opts,
      axis: orientation === "horizontal" ? "x" : "y",
    },
    plugins
  )
  const [canScrollPrev, setCanScrollPrev] = React.useState(false)
  const [canScrollNext, setCanScrollNext] = React.useState(false)

  const onSelect = React.useCallback((api: CarouselApi) => {
    if (!api) return
    setCanScrollPrev(api.canScrollPrev())
    setCanScrollNext(api.canScrollNext())
  }, [])

  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev()
  }, [api])

  const scrollNext = React.useCallback(() => {
    api?.scrollNext()
  }, [api])

  const handleKeyDown = React.useCallback(
    (event: React.KeyboardEvent<HTMLDivElement>) => {
      if (event.key === "ArrowLeft") {
        event.preventDefault()
        scrollPrev()
      } else if (event.key === "ArrowRight") {
        event.preventDefault()
        scrollNext()
      }
    },
    [scrollPrev, scrollNext]
  )

  React.useEffect(() => {
    if (!api || !setApi) return
    setApi(api)
  }, [api, setApi])

  React.useEffect(() => {
    if (!api) return
    onSelect(api)
    api.on("reInit", onSelect)
    api.on("select", onSelect)

    return () => {
      api?.off("select", onSelect)
    }
  }, [api, onSelect])

  return (
    <CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation:
          orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext,
      }}
    >
      <div
        onKeyDownCapture={handleKeyDown}
        className={cn("relative", className)}
        role="region"
        aria-roledescription="carousel"
        data-slot="carousel"
        {...props}
      >
        {children}
      </div>
    </CarouselContext.Provider>
  )
}

function CarouselContent({ className, ...props }: React.ComponentProps<"div">) {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div
      ref={carouselRef}
      className="overflow-hidden"
      data-slot="carousel-content"
    >
      <div
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CarouselItem({ className, ...props }: React.ComponentProps<"div">) {
  const { orientation } = useCarousel()

  return (
    <div
      role="group"
      aria-roledescription="slide"
      data-slot="carousel-item"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
}

function CarouselPrevious({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      data-slot="carousel-previous"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -left-12 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
}

function CarouselNext({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      data-slot="carousel-next"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -right-12 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight />
      <span className="sr-only">Next slide</span>
    </Button>
  )
}

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================================================================================
// FILE: ./src/components/homepage/SnapSection.tsx
================================================================================

"use client";

import { ReactNode, useRef } from 'react';
import { motion, useScroll, useTransform } from 'framer-motion';

interface SnapSectionProps {
  children: ReactNode;
}

export const SnapSection = ({ children }: SnapSectionProps) => {
  const sectionRef = useRef(null);

  // useScroll now targets this specific section
  const { scrollYProgress } = useScroll({
    target: sectionRef,
    // Animate as the section scrolls through the viewport
    // 'start end' = when the top of the section hits the bottom of the viewport
    // 'end start' = when the bottom of the section hits the top of the viewport
    offset: ['start end', 'end start'] 
  });

  // Create a parallax effect for the content inside the section.
  // As you scroll down (progress from 0 to 1), the content moves up.
  const y = useTransform(scrollYProgress, [0, 1], ['-30%', '30%']);

  return (
    // This is the snap target. It must be a direct child of the snap container.
    <section 
      ref={sectionRef} 
      className="h-screen w-full snap-start relative flex items-center justify-center overflow-hidden"
    >
      {/* The motion.div contains the actual section content.
          The 'y' style applies the parallax scroll effect. */}
      <motion.div 
        className="relative w-full h-full"
        style={{ y }}
      >
        {children}
      </motion.div>
    </section>
  );
};
================================================================================
// FILE: ./src/components/homepage/ModelsSection.tsx
================================================================================

// FILE: ./src/components/homepage/ModelsSection.tsx
"use client";

import { modelConfigs } from "@/lib/modelConfigs";
import { ModelCard } from "@/components/ModelCard";
import { ModelConfig } from "@/types/types";

const modelsToShow = Object.values(modelConfigs).slice(0, 3);

export function ModelsSection() {
  return (
    <section className="bg-black text-white h-screen flex flex-col justify-center">
      <div className="container mx-auto">
        <p className="text-sm uppercase tracking-widest text-neutral-400">GENERATIVE AI</p>
        <h2 className="text-4xl md:text-6xl font-regular tracking-tighter mt-2">MODELS</h2>
        <p className="max-w-2xl text-neutral-300 mt-4">We are focused on foundational research and systems engineering to build multimodal general intelligence.</p>
        
        <div className="flex md:grid md:grid-cols-3 gap-8 mt-12 overflow-x-auto md:overflow-visible pb-4">
          {modelsToShow.map((model) => (
            // THE FIX: Using the same responsive width as the working ControlSection
            <div key={model.id} className="w-4/5 md:w-auto flex-shrink-0">
              <ModelCard model={model as ModelConfig} />
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}
================================================================================
// FILE: ./src/components/homepage/ModelHighlightSection.tsx
================================================================================

// FILE: ./src/components/homepage/ModelHighlightSection.tsx
import Link from "next/link";

export function ModelHighlightSection() {
  return (
    <section className="bg-black text-white overflow-hidden h-screen">
      <div className="container mx-auto h-full relative isolate flex flex-col justify-center px-0 md:block">
        
        <div className="relative z-10 md:absolute md:top-0 md:left-0">
          <h2 className="text-7xl md:text-9xl font-extrabold tracking-tighter">New</h2>
          <p className="mt-4 md:mt-8 max-w-sm text-xl md:text-2xl z-10 leading-tight">
            <span className="text-white font-bold">Unprecedented control over cinematic storytelling</span> with our most capable video model yet.
          </p>
        </div>

        <div className="hidden md:block absolute top-28 right-0 max-w-xs text-neutral-400 text-sm z-10 space-y-4">
          <p>VEO 3 has a sophisticated, nuanced understanding of natural language and cinematic terms like timelapse or aerial shot, allowing for breathtakingly accurate and dynamic video outputs.</p>
        </div>
        
        <div className="w-full mt-8 md:mt-0 md:absolute md:top-1/2 md:left-1/2 md:-translate-x-1/2 md:-translate-y-1/2 md:w-[60vw] max-w-[700px] aspect-[5/4] overflow-hidden">
          <video
            src="/videos/skeleton.mp4"
            autoPlay
            loop
            muted
            playsInline
            className="w-full h-full object-cover"
          />
        </div>

        <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full md:w-[60vw] max-w-[900px] aspect-[5/4] z-20 flex items-center justify-center">
            <h3 className="text-8xl md:text-9xl font-extrabold tracking-tighter text-white mix-blend-difference">
              VEO3
            </h3>
        </div>

        <div className="mt-8 md:absolute md:bottom-0 md:left-0 max-w-sm z-20">
          <p className="text-sm">
            <span className="text-white font-bold">
              The model faithfully renders your creative prompts,
            </span>{' '}
             producing coherent, believable videos with stunning detail.
          </p>
          
          {/* THE FIX: Replaced Button with a styled Link and h2 */}
          <Link href="/generator?model=veo-3-fast" className="block mt-4">
            <h2 className="text-6xl md:text-8xl font-extrabold tracking-tighter whitespace-nowrap overflow-visible hover:text-neutral-300 transition-colors">
              Available Now
            </h2>
          </Link>
        </div>
      </div>
    </section>
  );
}
================================================================================
// FILE: ./src/components/homepage/ParallaxSection.tsx
================================================================================

// ParallaxSection.tsx
"use client";

import { ReactNode } from 'react';
import { motion, useTransform, MotionValue } from 'framer-motion';

interface ParallaxSectionProps {
  children: ReactNode;
  i: number;
  progress: MotionValue<number>;
  totalSections: number;
}

export const ParallaxSection = ({ children, i, progress, totalSections }: ParallaxSectionProps) => {
  const sectionProgressStart = i / totalSections;
  const sectionProgressEnd = (i + 1) / totalSections;

  const y = useTransform(
    progress,
    [sectionProgressStart, sectionProgressEnd],
    ["0%", "-20%"]
  );

  const scale = useTransform(
    progress,
    [sectionProgressEnd - 0.05, sectionProgressEnd], 
    [1, 0.9]
  );
  
  const opacity = useTransform(
    progress,
    [sectionProgressEnd - 0.02, sectionProgressEnd],
    [1, 0]
  );

  return (
    <section 
      className="h-screen sticky top-0" 
      style={{ 
        scrollSnapAlign: 'start',
      }}
    >
      <motion.div 
        className="relative w-full h-full"
        style={{ y, scale, opacity }}
        transition={{ type: "spring", stiffness: 100, damping: 30 }}
      >
        {children}
      </motion.div>
    </section>
  );
};
================================================================================
// FILE: ./src/components/homepage/EmpoweringSection.tsx
================================================================================

import { Button } from "@/components/ui/button";

export function EmpoweringSection() {
  return (
    <section className="bg-black text-white h-screen flex flex-col justify-center">
      <div className="container mx-auto">
        <h2 className="text-6xl md:text-8xl font-extrabold tracking-tighter mb-12">Empowering</h2>
        
        {/* --- THE MAIN CARD CONTAINER --- */}
        {/* It's now a single flex container with a white background and fixed desktop height. */}
        {/* It stacks vertically on mobile (flex-col) and horizontally on desktop (md:flex-row). */}
        <div className="bg-white text-black rounded-2xl md:h-[35vh] flex flex-col md:flex-row overflow-hidden">
          
          {/* --- Text Content Div --- */}
          {/* This div is flexible and takes up the remaining space. */}
          {/* 'justify-center' vertically centers the content. */}
          <div className="flex-1 p-8 md:p-12 flex flex-col justify-center">
            <div className="max-w-md">
              <h3 className="text-4xl font-bold">Are you a student?</h3>
              <p className="mt-4 text-neutral-700">
                We believe in making advanced AI tools accessible. That&apos;s why we provide dedicated support through free credits, exclusive access, and tailored resources to help students experiment and bring their ideas to life.
              </p>
              <Button className="mt-6 bg-black text-white hover:bg-neutral-800 font-semibold">
                Subscribe
              </Button>
            </div>
          </div>

          {/* --- Image Div --- */}
          {/* This div has a fixed width of 65% on desktop. */}
          {/* 'flex-shrink-0' prevents it from shrinking. */}
          <div className="w-full md:w-[65%] h-64 md:h-full flex-shrink-0">
            <img 
              src="/images/empowering-1.png" 
              alt="Student using AI tools" 
              className="w-full h-full object-cover"
            />
          </div>

        </div>
      </div>
    </section>
  );
}
================================================================================
// FILE: ./src/components/homepage/AboutUsSection.tsx
================================================================================

// FILE: ./src/components/homepage/AboutUsSection.tsx
import { Button } from "@/components/ui/button";
import Link from "next/link";

const missionParagraphs = [
    <>Our work is built on a bedrock of <strong>scientific discovery</strong>. We invest heavily in <strong>fundamental research</strong> to create tools that are not just powerful, but truly revolutionary.</>,
    <>We aim to dismantle creative barriers by providing <strong>intuitive tools</strong>. Our platform is designed to <strong>amplify artistic vision</strong>, enabling storytellers everywhere to produce high-quality visual content effortlessly.</>,
    <>Our expert engineers build <strong>robust, scalable systems</strong> that translate complex AI breakthroughs into a <strong>seamless user experience</strong>, making advanced content creation accessible and reliable for every user.</>,
    <>We are charting the course for the future of digital storytelling. By pioneering the <strong>next generation of creative AI</strong>, we are building a world where any <strong>imagined vision can be realized</strong>.</>
];

export function AboutUsSection() {
  return (
    <section className="bg-black text-white h-screen flex flex-col justify-center">
      {/* THE FIX: Responsive gap between columns */}
      <div className="container mx-auto grid md:grid-cols-2 gap-16 md:gap-32">
        {/* Left Column: Title and Button */}
        <div>
          {/* THE FIX: Responsive font size for the title */}
          <h2 className="text-4xl md:text-5xl lg:text-6xl font-semibold tracking-tighter leading-tight">
            Our mission is to build the perfect generation platform, to elevate creative minds to the next level.
          </h2>
          <Link href="/about">
            <Button size="lg" className="mt-8 bg-white text-black hover:bg-neutral-200 transition-colors font-semibold">
              Join us
            </Button>
          </Link>
        </div>
        {/* Right Column Wrapper: THE FIX - Justify alignment is now responsive */}
        <div className="flex md:justify-end">
          <div className="grid grid-cols-1 max-w-md md:max-w-xs gap-8 text-neutral-400">
            {missionParagraphs.map((text, index) => (
              <p key={index}>{text}</p>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}
================================================================================
// FILE: ./src/components/homepage/ControlSection.tsx
================================================================================

// FILE: ./src/components/homepage/ControlSection.tsx
import { Button } from "@/components/ui/button";
import { HoverVideoPlayer } from "@/components/HoverVideoPlayer";
import Link from "next/link";

const controlItems = [
  { title: "Camera", videoSrc: "/videos/control-1-optx.mp4" },
  { title: "Pose", videoSrc: "/videos/control-2-optx.mp4" },
  { title: "Transition", videoSrc: "/videos/control-3-optx.mp4" },
];

export function ControlSection() {
  return (
    <section className="bg-black text-white h-screen flex flex-col justify-center">
      <div className="container mx-auto">
        <div className="flex flex-col md:flex-row justify-between md:items-end mb-12">
          <div>
            <p className="text-sm uppercase tracking-widest text-neutral-400">GENERATIVE AI</p>
            <h2 className="text-4xl md:text-6xl font-regular tracking-tighter mt-2">CONTROL</h2>
            <p className="max-w-md text-neutral-300 mt-4">We provide full control over the output, from motion and pose to camera placement—everything is in your hands.</p>
          </div>
          <Link href="/explore" className="mt-6 md:mt-0">
            <Button variant="brand-solid">
              START NOW
            </Button>
          </Link>
        </div>
        
        {/* --- THE FIX: Responsive Container --- */}
        {/* On mobile: flexbox with horizontal scrolling */}
        {/* On desktop: 3-column grid */}
        <div className="flex md:grid md:grid-cols-3 gap-8 overflow-x-auto md:overflow-visible pb-4">
          {controlItems.map((item) => (
            // THE FIX: Card width and flex behavior for mobile scrolling
            <div key={item.title} className="w-4/5 md:w-auto flex-shrink-0">
              <div className="aspect-[3/4] overflow-hidden rounded-lg">
                <HoverVideoPlayer src={item.videoSrc}  />
              </div>
              <p className="text-neutral-400 mt-4 font-medium">{item.title}</p>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}
================================================================================
// FILE: ./src/components/homepage/HeroSection.tsx
================================================================================

"use client";

import React, { useState } from 'react';
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { motion, AnimatePresence } from 'framer-motion';

// --- NEW: Define the content for your hero slides ---
const heroSlides = [
  {
    //videoSrc: "/videos/highlight-1-opx.mp4", // Replace with your first video
    videoSrc: "/videos/full-reel.mp4", // Replace with your first video
    title: <>YOUR PERSPECTIVE<br />LIKE NEVER BEFORE</>,
    subtitle: "A platform for filmakers, advertisers & creative teams",
  },
];

export function HeroSection() {
  const [currentIndex, setCurrentIndex] = useState(0);
  const currentSlide = heroSlides[currentIndex];
  
  // This function is called when a video finishes playing
  const handleVideoEnd = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % heroSlides.length);
  };

  // Estimate your longest video duration for the progress bar animation
  const videoDuration = 10; // in seconds

  return (
    <section className="relative h-[95vh] w-full flex items-center justify-start text-left text-white overflow-hidden">
      {/* --- Video Background Carousel --- */}
      <div className="absolute top-0 left-0 w-full h-full z-0">
        <AnimatePresence>
          <motion.video
            key={currentSlide.videoSrc}
            src={currentSlide.videoSrc}
            autoPlay
            muted
            loop
            playsInline
            onEnded={handleVideoEnd}
            className="w-full h-full object-cover"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </AnimatePresence>
        <div className="absolute inset-0 bg-black/50" />
      </div>

      {/* --- Left-Aligned Text Content --- */}
      <div className="container mx-auto relative z-10 px-4">
        <AnimatePresence mode="wait">
          <motion.div
            key={currentIndex}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.7, ease: "circOut" }}
            className="max-w-4xl"
          >
            <h1 className="text-7xl md:text-7xl lg:text-7xl font-extrabold tracking-tighter leading-tight">
              {currentSlide.title}
            </h1>
            <p className="mt-0 text-lg md:text-xl text-neutral-300">
              {currentSlide.subtitle}
            </p>
            <Link href="/explore">
              {/* --- Using the new brand-solid variant --- */}
              <Button size="lg" variant="brand-solid" className="mt-8">
                START NOW
              </Button>
            </Link>
          </motion.div>
        </AnimatePresence>
      </div>

      {/* --- Dynamic Page Indicator Bars --- */}
      <div className="absolute bottom-0 left-0 w-full h-1.5 z-20 flex">
        {heroSlides.map((_, index) => (
          <div key={index} className="flex-1 h-full bg-white/20">
            {index === currentIndex && (
              <motion.div
                className="h-full bg-white"
                initial={{ width: '0%' }}
                animate={{ width: '100%' }}
                transition={{ duration: videoDuration, ease: 'linear' }}
              />
            )}
          </div>
        ))}
      </div>
    </section>
  );
}
================================================================================
// FILE: ./src/components/icons/Googleicon.tsx
================================================================================

import * as React from 'react';

export const GoogleIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 48 48"
    width="24px"
    height="24px"
    {...props}
  >
    <path
      fill="#FFC107"
      d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"
    />
    <path
      fill="#FF3D00"
      d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"
    />
    <path
      fill="#4CAF50"
      d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"
    />
    <path
      fill="#1976D2"
      d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.089,5.571l6.19,5.238C42.022,36.218,44,30.561,44,24C44,22.659,43.862,21.35,43.611,20.083z"
    />
  </svg>
);